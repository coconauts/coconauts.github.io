<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coconauts]]></title>
  <link href="http://coconauts.net/atom.xml" rel="self"/>
  <link href="http://coconauts.net/"/>
  <updated>2016-04-15T23:41:47+01:00</updated>
  <id>http://coconauts.net/</id>
  <author>
    <name><![CDATA[Coconauts]]></name>
    <email><![CDATA[admin@coconauts.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build a Smart Home Using Raspberry Pi and Energenie]]></title>
    <link href="http://coconauts.net/blog/2016/04/15/energinie-and-raspberry-pi-setup/"/>
    <updated>2016-04-15T23:51:00+01:00</updated>
    <id>http://coconauts.net/blog/2016/04/15/energinie-and-raspberry-pi-setup</id>
    <content type="html"><![CDATA[<p>We recently discovered <a href="https://energenie4u.co.uk/">Energenie</a> (thanks to <a href="https://twitter.com/Man0jN">Manoj</a>) a nice and cheap remote controlled socket
which also provides a custom shield for Raspberry Pi, you can use it to
programatically control those sockets. This allows endless possibilities:
from temporized sockets, to a socket that automatically turns on when
detects presence using a PIR sensor, or triggered by a website or a phone app.</p>

<p><img src='https://www.flickr.com/photos/136662316@N07/25845471424/sizes/m/'/></p>

<!-- more -->


<p>You can buy 2 different types of Energenie, some <a href="https://energenie4u.co.uk/catalogue/product/ENER002-4">individual sockets</a>
or an <a href="https://energenie4u.co.uk/catalogue/product/ENER010">extension lead socket with 4 individually controlled</a>.
You can also find them cheaper on Amazon or <a href="http://www.ebay.co.uk/itm/161972721449?_trksid=p2060353.m2749.l2649&amp;ssPageName=STRK%3AMEBIDX%3AIT">Ebay</a>.</p>

<p>Every Energenie comes with a remote that you can use to power on or off those sockets using radio
(no need to point with the controller to the socket like an infrared remote).
You can use them just like this, but of course the really fun part is to be able
to program them with your Raspberry Pi. For this, you&rsquo;ll need the
<a href="https://energenie4u.co.uk/catalogue/product/ENER314">control board shield</a>
as well.</p>

<p>You can download a library for Python to use with Raspberry Pi from <a href="http://pythonhosted.org/energenie/">their website</a>, and check some examples of basic usage.</p>

<p>In our case, as our first project, we built a website so you can control all
sockets in the extension lead from your
computer. In one of them we added some Cinema style lights under our sofa using a
LED strip connected to a 12V supplier on the socket.</p>

<p><img src='https://farm2.staticflickr.com/1704/26449115715_b672c53b20_z_d.jpg'/>
<img src='https://farm2.staticflickr.com/1652/26449115515_60a9fd10a7_z_d.jpg'/></p>

<p>The interface looks like this:</p>

<p><img src='https://farm2.staticflickr.com/1630/26423191956_b64967a883_o_d.png'/></p>

<p>You can check the source code in our <a href="https://github.com/rephus/energenie-manager">Github</a>.</p>

<h3>Warnings and limitations</h3>

<p>Each Raspberry PI board or remote allows you to use 4 different sockets
(or 1 extension lead)  maximum. Which means you can&rsquo;t have for example 5 sockets
controlled with a single Raspberry Pi.</p>

<p>Each socket can only be paired with 2 controllers maximum, which means you can&rsquo;t control a socket with a remote and 2 Raspberry Pis. Every time you pair a new socket, the oldest one will get unpaired. Also, remember to pair every device before using it or it won&rsquo;t work.</p>

<p>Do you have more ideas to implement with Energenie? we&rsquo;d like to hear about them in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Pi Day!]]></title>
    <link href="http://coconauts.net/blog/2016/03/14/happy-pi-day/"/>
    <updated>2016-03-14T12:00:00+00:00</updated>
    <id>http://coconauts.net/blog/2016/03/14/happy-pi-day</id>
    <content type="html"><![CDATA[<p>Do you know what day is today? It&rsquo;s 3.14, and because it matches the
decimals in the most beloved irrational number ever, it&rsquo;s been called an
<a href="https://en.wikipedia.org/wiki/Pi_Day">official celebration of number Pi</a>.</p>

<p>Actually last year it was a most special instance, as it was 3.14.15; an
event that won&rsquo;t occur again for another 100 years! To celebrate, and to
give some use to our newly bought 3D printer, we printed some <a href="http://www.thingiverse.com/thing:28882">Pi-shaped
cookie-cutters we found off Thingiverse</a>,
and baked some delicious Pi&hellip; cookies.</p>

<p><img src="https://thingiverse-production-new.s3.amazonaws.com/renders/42/94/15/17/a7/IMG_20150312_223708_preview_featured.jpg" /></p>

<p>This year still feels special, as it is 3.14.16, the decimals of <em>rounded</em> Pi.
If you wanna celebrate, and have a 3D printer yourself, have a look at
<a href="http://www.thingiverse.com/thing:28882">this neat collection</a> they&rsquo;ve put
together, and print yourself something awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coconauts CI, a Lightweight CI Built on NodeJS]]></title>
    <link href="http://coconauts.net/blog/2016/02/04/coconauts-ci-nodejs/"/>
    <updated>2016-02-04T23:00:00+00:00</updated>
    <id>http://coconauts.net/blog/2016/02/04/coconauts-ci-nodejs</id>
    <content type="html"><![CDATA[<p>CIs are good, as soon as your projects grow, having a continuous integration software
that manages all your apps and deployments is really useful. We have been using a self-hosted
jenkins instance in our server for a few years already, and we have some
<a href="http://coconauts.net/blog/2014/09/09/background-tasks-in-jenkins-ipchange">interesting things with it</a>.</p>

<p>However, we have always known that jenkins is too heavy, it consumes too much memory and it
has a slow interface, as it is written on Java.</p>

<p>So we were really looking for a lightweight self-hosted CI that could run easily on a Raspberry PI,
but we couldn&rsquo;t find any existing solution, so we decided to build our own, and it was easier that we expected.</p>

<p><img src='https://farm2.staticflickr.com/1443/24822031815_fcc099fc04_z_d.jpg'/></p>

<!-- more -->


<p>This project, called <code>Coconauts CI</code> is still an experiment in progress, but we decided to share it
on a early stage.</p>

<p>You can download the project on our Github: <a href="https://github.com/coconauts/coconauts-ci">https://github.com/coconauts/coconauts-ci</a></p>

<h2>Characteristics</h2>

<ul>
<li>Node.js and the <a href="http://expressjs.com/">Express framework</a> for the backend</li>
<li>JQuery for the frontend</li>
<li>Powered by Redis database</li>
</ul>


<h2>Key features</h2>

<ul>
<li>Simple 1-page only dashboard</li>
<li>Easily add or update projects in 2 clicks</li>
<li>Execute tasks periodically</li>
<li>Clone and update repositories from git (github , bitbucket, etc)</li>
<li>Run projects without repository to execute tasks periodically.</li>
<li>Slack integration using webhooks</li>
<li>Look at previous build logs</li>
</ul>


<p><img src='https://farm2.staticflickr.com/1639/24704187222_47dc02eaaa_z_d.jpg'/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RTS Game Template on Unity3d: StarCraft for Mobile]]></title>
    <link href="http://coconauts.net/blog/2016/01/30/starcraft-mobile-unity3d/"/>
    <updated>2016-01-30T20:16:34+00:00</updated>
    <id>http://coconauts.net/blog/2016/01/30/starcraft-mobile-unity3d</id>
    <content type="html"><![CDATA[<p>We have been just <em>playing</em> with Unity3D for a few months, but we have already tried to build something: a new RTS (Real Time Strategy) game for Desktop and Mobile. But we want to make this game abstract and adaptable, so that it works like an engine, which means we could easily change the models, behaviour and statistics from the objects in the scene to make a completely new game, a clone of <a href="https://www.youtube.com/watch?v=0Wkrd594k4k">Star Wars Galactic Battlegrounds Clone Campaings</a> maybe ? or maybe completely new strategy game featuring plants vs zombies, pirates vs ninjas, angels vs demons or monkeys vs giraffes.</p>

<p><img src='https://farm2.staticflickr.com/1636/24079670424_3275b9c5f1_z_d.jpg'/></p>

<p>In our case, we&rsquo;ve started by using the 3D models, animations from StarCraft II game
and reverse engineered the behaviour of this game to make our strategy game template.</p>

<!-- more -->


<p><img src='https://farm2.staticflickr.com/1502/24614331371_6e4c44e84e_z_d.jpg'/></p>

<p>Please note that this is just a technical demo and it&rsquo;s not made to replace
StarCraft or make any money with their work in any way, we are just trying to follow their path because we love this game.</p>

<iframe width="100%" height="450" src="https://www.youtube.com/embed/MqGj5grWYG8" frameborder="0" allowfullscreen></iframe>


<h2>What we have achieved</h2>

<p>This is the list of features we have developed to simulate a basic gameplay from Starcraft.
They together implement the featureset from StarCraft games, but it can be easily applied to fit any other strategy gameplay. Do you want to have 4 different resource types instead of 2 like in SWGB ? just update the Resources class and you&rsquo;re done.</p>

<p><img src='https://farm2.staticflickr.com/1534/24707844895_74afa1c9af_z_d.jpg'/></p>

<ul>
<li>3D models and animations</li>
<li>Background music, sounds and reactions (<em>For Adun!</em>)</li>
<li>Buildings and units training queue</li>
<li>Special building behaviour (like gas extractor or supply depots)</li>
<li>Ground and flying units (Zerg and Terran)</li>
<li>Researches</li>
<li>Resources (Mineral, gas and supplies)</li>
<li>Import maps using image heightmap</li>
<li>Mouse and touch controls</li>
<li>Camera movement and zoom</li>
<li>Completely new simple interface for touch devices</li>
<li>New survival gameplay mode</li>
<li>Basic AI</li>
<li>Minimap</li>
<li>Pathfinding (using free A* pathfinding)</li>
</ul>


<p><img src='https://farm2.staticflickr.com/1452/24681642176_2a5f191b10_z_d.jpg'/></p>

<h2> What is missing</h2>

<p>This are things we haven&rsquo;t build for this prototype but we will probably do in the future.</p>

<ul>
<li>Multiplayer mode</li>
<li>Better AI</li>
<li>Local avoidance</li>
<li>Protoss</li>
<li>More units and buildings (like bunkers)</li>
<li>Wireframe support on OpenGL devices or equivalent</li>
<li>Unit visibility filter</li>
<li>Team coloring</li>
<li>Healing units, shields or Zerg restoration feature.</li>
</ul>


<p>We are planning to release this engine in the future (without the StarCraft assets),
but in the meantime let us know any thoughts in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coconauts 2015 Retrospective]]></title>
    <link href="http://coconauts.net/blog/2016/01/01/year-retrospective/"/>
    <updated>2016-01-01T14:00:00+00:00</updated>
    <id>http://coconauts.net/blog/2016/01/01/year-retrospective</id>
    <content type="html"><![CDATA[<p>Year 2015 has come to an end, and as it turns out we do have
<a href="https://en.wikipedia.org/wiki/Self-balancing_two-wheeled_board">hoverboards</a>,
<a href="https://www.youtube.com/watch?v=vZRFcGrrsyc">holograms/augmented reality</a>,
yet for some reason hip-kids insist in dressing as lumberjacks rather than
in futuristic clothing.</p>

<p>It feels just like yesterday when we were writing
<a href="https://coconauts.net/blog/2014/12/31/coconauts-2014-retrospective/">our retrospective post</a>
last year. Time does fly! So how did we fare this year in comparison?</p>

<!-- more -->


<ul>
<li>The <a href="https://coconauts.net/projects/watchduino2/">second version of Watchduino</a>
was an absolute smash. We managed to get a functional prototype with
Bluetooth connectivity, plus a phone companion app. It&rsquo;s starting to
look something like a real smartwatch, and it was awarded
<a href="https://coconauts.net/blog/2015/08/24/watchduino-2-is-semifinalist-on-the-2015-hackaday-prize/">semifinalist in the Hackaday Prize</a>.</li>
<li>Our second big release of the year, even if it was a bit last minute,
was the long promised open sourcing of
<a href="https://coconauts.net/blog/2015/12/31/gramola-release/">Gramola</a>,
a web-based music player.</li>
<li>Smaller projects, but let&rsquo;s not forget about:
<a href="https://coconauts.net/blog/2015/10/13/notification-listener-android-cordova/">a notification listener plugin for Cordova</a>,
<a href="https://coconauts.net/blog/2015/04/22/simple-automatic-watering-system-arduino/">an Arduino automated watering system</a>,
our <a href="https://coconauts.net/blog/2015/07/31/404-games/">404-games</a>.</li>
<li>Seems like we still aren&rsquo;t blogging as much as we should, as we have some
extra small projects that we didn&rsquo;t tell you about in the blog:
<a href="https://github.com/coconauts/image-to-json">an image-to-json</a> converter,
<a href="http://itch.io/jam/procjam/rate/43682">a generative game</a> made for the
<a href="http://www.procjam.com/">PROCJAM</a> game jam, and
<a href="https://github.com/coconauts/find-open">a webapp to find open restaurants near you</a>.</li>
<li>We didn&rsquo;t blog as much as we would have liked, but even so we brought
you a bunch of tutorials about
<a href="https://coconauts.net/blog/tags/arduino/">Arduino</a>,
<a href="https://coconauts.net/blog/tags/unity3d/">Unity3D</a>, or
<a href="https://coconauts.net/blog/tags/chiptune/">chiptune music</a>, among others.</li>
</ul>


<p>The year certainly felt as packed as the year before, so we definitely
want to keep the momentum going for 2016. Here&rsquo;s our immediate plans for
the year to come:</p>

<ul>
<li>We didn&rsquo;t do as much gamedev as we would have liked during 2015, so we
would like to finish a Unity3D game during the next year. Specially now that
<a href="http://blogs.unity3d.com/es/2015/08/26/unity-comes-to-linux-experimental-build-now-available/">Unity3D is available for Linux</a>,
there&rsquo;s no better time!</li>
<li>Once again, we want to aim to do more and better posting. 2015 saw
regular blog updates until october, but for this year we want to do
even better.</li>
<li>To help fatten our blog and Github account, we want to commit to talk
about our projects even while in an early stage. Instead of doing the
development of a game or project in the dark until it is polished enough to
show (as done with <a href="https://coconauts.net/projects/timebomb2/">Exploding Bunnies</a>
or <a href="https://coconauts.net/projects/gramola/">Gramola</a>)
we want to to show prototypes and betas as early as we
have them, and keep our development more open
(as we have done with <a href="https://coconauts.net/projects/watchduino2/">Watchduino2</a>).</li>
<li>Speaking of Watchduino2, we plan to continue it&rsquo;s development due to
popular demand, albeit perhaps at a slower pace than we did during 2015.</li>
</ul>


<p>Wishing a happy and exciting 2016 for all our followers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Gramola, a Lightweight Web Music Player]]></title>
    <link href="http://coconauts.net/blog/2015/12/31/gramola-release/"/>
    <updated>2015-12-31T12:00:00+00:00</updated>
    <id>http://coconauts.net/blog/2015/12/31/gramola-release</id>
    <content type="html"><![CDATA[<p><img src="https://farm2.staticflickr.com/1513/24000467331_46d15821da_b_d.jpg" /></p>

<p>You may have noticed a mysterious project that has been since the dawn of time
in our front page: <em>&ldquo;Gramola, lightweight online music player,
powered by JPlayer with tons of features&rdquo;</em>. We even have a detailed
<a href="https://coconauts.net/projects/gramola/">project page</a> about it&hellip;
yet disapointingly, you would find no download links or source code there.</p>

<p>We built (and <em>rebuilt</em>!) Gramola some time ago, and we&rsquo;ve been wanting
to find some time to give it some polish and open source it. In fact,
at the begining of the year
<a href="https://coconauts.net/blog/2014/12/31/coconauts-2014-retrospective/">we promised you</a>
that we would get it out in 2015. So to honor our words, here it is!</p>

<p>Read details about it on the <a href="https://coconauts.net/projects/gramola/">project page</a>,
or head directly to the <a href="https://github.com/coconauts/gramola">Github repository</a>
for code and install instructions.</p>

<p>Happy music listening in 2016!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Honey, I Shrunk the Watchduino]]></title>
    <link href="http://coconauts.net/blog/2015/10/20/honey-i-shrunk-the-watchduino/"/>
    <updated>2015-10-20T22:40:34+01:00</updated>
    <id>http://coconauts.net/blog/2015/10/20/honey-i-shrunk-the-watchduino</id>
    <content type="html"><![CDATA[<p>Last weekend we attended
<a href="http://hackathon.pchintl.com/hackathons/london/2015/10/16/">a hardware hackathon organised by PCH in London</a>.
The theme of the hackathon was &ldquo;Take your prototype to the
next stage in 54 hours&rdquo;, so in our case we brought our
Watchduino prototype and focused on trying to make it closer
to how it would look if it were a commercial product.</p>

<p>The best part is that at the hackathon there was a set of
mentors, people who are experts in different areas of IoT,
which were giving us useful advice about our product
direction, design optimizations or the ins and outs of
manufacturing.</p>

<p>By the end of the hackathon, we had a functional (at least
theorethically) design for Watchduino that looks this
awesome:</p>

<p><img src=https://farm1.staticflickr.com/772/22314247456_e69a4e1275_z_d.jpg' /></p>

<!-- more -->


<p>The first step to getting a hardware product into manufacturing is integrating all the electronics into a PCB. This not only makes the system easier to put together, it&rsquo;s also smaller, and likely to be more energetically efficient.</p>

<p>So we designed a PCB that would mainly replace the Arduino
Mini, breaking out the pins of the ATMega processor and
leaving space to surface mount the rest of the components.
To completely replace the Arduino board, a 8Mhz crystal
oscillator needs to be added on top of our current
components, as well as breaking out the RX and TX pins for
reprogrammation. It&rsquo;s pretty similar to
<a href="https://bitbucket.org/rephus/watchduino/src/master/docs/how_to_replicate.md">the process we  were following in our first Watchduino</a>.</p>

<p>The board was designed with
<a href="http://fritzing.org">Fritzing</a>,
which we were already
using for our schematic. We were recommended Eagle, which
appears to be the industry standard software, and has
a bigger component library and tons of support online.
But Fritzing is simpler and open source, so it suited
our purposes for the time being. You can find the file
<a href="https://github.com/coconauts/watchduino2/tree/master/schema">on the Github repo</a>.
In the future we would like to try out Eagle though.</p>

<p>By sacrificing the buzzer (which is not really very useful having the vibrator motor) and the USB charching module (to be replaced by a custom connector, as commercial smartwatches usually have) we were able to make our PCB exactly 1 square inch in area. Pretty sweet!</p>

<p><img src='https://farm6.staticflickr.com/5788/21719276463_73d93089ea_o_d.png'/></p>

<p>Being able to mount all the electronics in this small
area mean there&rsquo;s no longer the need to spread them across the strap as they were before. The whole design is
completely compact, and small enough to fit in it&rsquo;s
entirety into a watch head; battery and everything.</p>

<p>In consequence, we redesigned our 3D case into a simpler
shape, looking now very much like a conventional watch!</p>

<p><img src=https://farm6.staticflickr.com/5640/21719246863_26ed9e4423_m_d.jpg' /></p>

<p>We are cheating a little bit, because we are reusing
<a href="https://www.decathlon.co.uk/strap-m-swip-watch-strap-black-id_8243023.html">an existing strap from a Geonaute watch</a>.
These watches are sold at Decathlon stores, and just
happen to have a so handy sliding mechanism for
interchangeable straps.</p>

<p><img src=https://farm6.staticflickr.com/5660/22154594199_2a668aec02_m_d.jpg' /></p>

<p>So we designed our new 3D case
with the same shape, and made it compatible with the
Geonatue straps. Once we figure out how to print with
flexible filament we&rsquo;ll replicate the strap with the
same connector.</p>

<p>There&rsquo;s just one thing missing: our sexy new prototype
can&rsquo;t be functional until the PCB is printed (the image
above I&rsquo;m afraid is a dramatization with a screenshot
pasted on it). Printing PCBs can be done manually, but it&rsquo;s handier, better, and often cheaper to just
<a href="http://hackaday.com/2015/09/21/why-are-you-still-making-pcbs/">get a manufacturer to do the job</a>.</p>

<p>When you design a PCB, either with Fritzing, Eagle, or
other software, you can export the result as <em>Gerber files</em>,
which contain all the different layers of your design.
You can provide any PCB manufacturer with this format,
and they&rsquo;ll be able to fabricate a production-quality
version of your board.</p>

<p>So we&rsquo;ve done just that: we ordered a 3-board batch of PCBs to
<a href="https://oshpark.com/">OSH Park</a>, for the outrageous price of just £1 each. We can&rsquo;t wait for them to arrive and see if we can get our first mini production-run of Watchduinos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notification Listener Plugin for Android With Cordova]]></title>
    <link href="http://coconauts.net/blog/2015/10/13/notification-listener-android-cordova/"/>
    <updated>2015-10-13T21:16:34+01:00</updated>
    <id>http://coconauts.net/blog/2015/10/13/notification-listener-android-cordova</id>
    <content type="html"><![CDATA[<p>When we were developing <a href="http://coconauts.net/projects/watchduino2">Watchduino2</a> we required to forward messages for all notifications we receive in our phone by using
the <a href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html">NotificationListenerService</a> available on Android.</p>

<p>We managed to do this in the first version of our companion app on native code, unfortunatelly, we realised this feature was not available <em>yet</em> on Cordova, the new framework we use for building
our cool responsive companion app.</p>

<p>The solution? Roll our own Cordova plugin to provide this functionality!</p>

<!-- more-->


<h3>How it works</h3>

<p>The basic idea of this plugin is to create a callback from JavaScript that will be triggered everytime you get a notification
on Android.</p>

<h3>How to install</h3>

<p>Installing this plugin is really simple, and it&rsquo;s like installing any other plugin on Cordova.</p>

<pre><code>cordova plugin add https://github.com/coconauts/NotificationListener-cordova
</code></pre>

<h3>How to use</h3>

<p>Simply  create a listener from javascript using this method inside the Cordova initialization code.</p>

<pre><code>notificationListener.listen(onNotification,onError);
</code></pre>

<p>Sample code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var app = {
</span><span class='line'>    initialize: function() {
</span><span class='line'>        this.bindEvents();
</span><span class='line'>    },
</span><span class='line'>    bindEvents: function() {
</span><span class='line'>      document.addEventListener('deviceready', this.onDeviceReady, false);
</span><span class='line'>    },
</span><span class='line'>    onDeviceReady: function() {
</span><span class='line'>      log("Cordova start", "Device ready");
</span><span class='line'>
</span><span class='line'>      notificationListener.listen(function(n){
</span><span class='line'>          console.log("Received notification " + JSON.stringify(n) );
</span><span class='line'>        }, function(e){
</span><span class='line'>          console.log("Notification Error " + e);
</span><span class='line'>        })
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>app.initialize();
</span></code></pre></td></tr></table></div></figure>


<h3>Disclaimer</h3>

<p>As far as I know, listening for notifications is only supported by Android phones (from version 4.0), and we haven&rsquo;t done any IOS development in the past, so I don&rsquo;t thing is
possible to port this plugin to IOS. But feel free to contribute to our project if you think it can be extended to other platforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackaday Price 2015 Retrospective]]></title>
    <link href="http://coconauts.net/blog/2015/10/06/hackaday-price-2015-retrospective/"/>
    <updated>2015-10-06T22:40:34+01:00</updated>
    <id>http://coconauts.net/blog/2015/10/06/hackaday-price-2015-retrospective</id>
    <content type="html"><![CDATA[<p><img src='https://farm1.staticflickr.com/584/21381222983_a64f947c8d_o_d.png' align='right'/></p>

<p>You may have noticed that the blog has been quite quiet during the last month.
The reason being we were focusing our efforts on doing some epic Watchduino
development, as <a href="https://hackaday.io/project/7244-watchduino2">contestants for the Hackaday Prize 2015</a>.
Sad news in the end though, as we didn&rsquo;t make it to the finals.</p>

<p>But that&rsquo;s ok though. Regardless of the result, this has been a good excercise
for us, and the contest has pushed us to keep working hard on the
<a href="http://coconauts.net/projects/watchduino2">Watchduino</a> project. That&rsquo;s why we want to
sum up all we have learned and all we have improved on the project during
the course of the contest.</p>

<!-- more -->


<h3>3D Case</h3>

<p><img class='screenshot' src='https://farm1.staticflickr.com/760/21814249490_2bfe5bf2b9_z_d.jpg'/>
<img class='screenshot' src='https://farm6.staticflickr.com/5717/21815509489_5531e2b080_z_d.jpg'/></p>

<p>One of the things in our TODO list was to build a proper 3D case for our watch,
and thanks to our <a href="https://twitter.com/rephus/status/571811583602647040">3D printer</a> we managed to build a wearable prototype.</p>

<p>We also introduced the Smart Strap design which allows us to keep some of the
electronic components spread along the strap, keeping the watch face smaller.</p>

<p>Our first case design, from a few months ago, was done in <a href="https://www.blender.org/">Blender</a>,
however we&rsquo;ve now switched to <a href="https://tinkercad.com/things/gG641gG1b4c">Tinkercad</a> as it&rsquo;s a great web platform for doing
awesome 3D models really quickly.</p>

<p>We also designed an additional strap prototype using a flexible strap, that we
plan to 3D print soon enough.</p>

<h3>Migration to Cordova</h3>

<p><img class='screenshot' src='https://farm1.staticflickr.com/694/21815557799_9d65cd5172_z_d.jpg'/>
<img class='screenshot' src='https://farm1.staticflickr.com/668/21814312750_9f80cebaa1_b_d.jpg'/></p>

<p>A few weeks before we joined the contest, we started migrating the existing
Android companion app, written natively, to the Cordova framework.</p>

<p>The reason for this is because Cordova seems a better platform for us, based
on HTML5 + JS, and multiplatform. It&rsquo;s easier and faster to develop with,
the codebase is smaller, and in general we are quite happy with it!</p>

<p>We finally migrated all the code with a better design by the end of August,
and we even introduced new functionality.</p>

<h3>Showcase videos</h3>

<p>We made two videos to showcase the capabilities of the watch.</p>

<iframe width="100%" height="500" src="https://www.youtube.com/embed/n-ubg1R2e-A" frameborder="0" allowfullscreen></iframe>




<iframe width="100%" height="500" src="https://www.youtube.com/embed/LVE85OxWGzs" frameborder="0" allowfullscreen></iframe>


<h3>Open source code and documentation</h3>

<p>One of the requirements of the project was to release our code and build our
documentation so everyone can create a new Watchduino from scratch.</p>

<p>This has been in our roadmap for ages, so it was a good excuse to clean up
the code a bit an make it public.</p>

<p>Feel free to <a href="https://github.com/coconauts/watchduino2">clone our project</a>, and to make pull request to improve our own.</p>

<p>Be warned though: the codebase is still under heavy development, so things
might change drastically from one day to the next!</p>

<h3>Next steps</h3>

<p>The community also helped us to improve our watch architecture and we are keen on
trying different approaches so Watchduino can be even better than it&rsquo;s now.</p>

<p>One of the main objectives is to improve the Bluetooth connectivity and
the power consumption. Another one is to make an app creation framework that is
lean and easy to use.</p>

<p>Stay tuned for more updates, are we are definitely not done with our
Watchduino development!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synthesizing Chiptune Music Programatically]]></title>
    <link href="http://coconauts.net/blog/2015/10/04/creating-chiptune-music-programatically/"/>
    <updated>2015-10-04T20:35:34+01:00</updated>
    <id>http://coconauts.net/blog/2015/10/04/creating-chiptune-music-programatically</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve shown you in the past how to create chiptune-style music both
<a href="https://coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">with a DAW program</a>,
and <a href="https://coconauts.net/blog/2015/04/19/creating-trve-chiptune-with-a-tracker/">with old-school trackers</a>.</p>

<p>There&rsquo;s still another way to do it: via code. Particularly suitable for
videogame music in particular, as you can have fine-grained control
over the music that you autogenerate, giving it the ability to be
dynamic.</p>

<p>Every programming language worth their name will have a basic sound
synthesizing library, which will be more than what to need to
make chiptune sounds.</p>

<!--more-->


<p>The basics are these: you&rsquo;ll need something called an oscillator,
which is nothing more than a device (in our case it will be a software
device, but a device nonetheless) capable of generating <a href="http://public.wsu.edu/~jkrug/MUS364/audio/Waveforms.htm">basic sound
waves</a>:
sine, square, triangle and sawtooth.</p>

<p><img src="http://coconauts.net/images/posts/chiptune/waveforms.png" /></p>

<p>Then&#8217; you&rsquo;ll combine several sound waves together to form your sound.
This technique is known as additive synthesis, and it&rsquo;s illustrated
just below.</p>

<p><img src="http://coconauts.net/images/posts/chiptune/additive.jpg" /></p>

<p>Once you have a timbre that you like, the synthesizing library should
have functions to alter its frequency, which will result in
different tones being produced (this is called FM, or frequency modulation,
synthesis), and then you have all you need to make any melody.</p>

<p>There&rsquo;s something that you have to take into account, and is that you
should limit yourself a bit with the kind and number of waves that
you&rsquo;re using, to try to replicate the limitations of the hardware of
old, and thus achieve convincing chiptune sounds.
In <a href="http://opengameart.org/forumtopic/kickin-it-old-school-setting-up-nes-style-chiptunes">this forum post</a>
the author recommends using nothing more than square, triangle and
sawtooth waves (avoiding sine), and limiting yourself to four
simultaneous instruments (as old sound cards didn&rsquo;t come with many
audio channels). Have in mind though that these are just guidelines,
in practice you should experiment with everything and pick whatever
you think sounds good and convincingly chiptuneish.</p>

<p>Synthesizing your
own game music programatically has several important advantages:
you wont waste any space storing your music assets (when your game is
going on mobile phones this is an important aspect to consider!), and
it allows for unlimited flexibility if your music is going to be
dynamic. So we personally are keen in exploring this approach in a
future game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add List of Featured Posts to Octopress]]></title>
    <link href="http://coconauts.net/blog/2015/09/08/add-featured-posts-to-octopress/"/>
    <updated>2015-09-08T20:03:19+01:00</updated>
    <id>http://coconauts.net/blog/2015/09/08/add-featured-posts-to-octopress</id>
    <content type="html"><![CDATA[<p>A few months ago we were requested to add a list of featured posts to an index page in Octopress.
So we did a bit of research about how Octopress + Jekyll + Lyquid template internally works.
And we ended up with a nice solution that you can easily replicate in your own blog.</p>

<p>In this post we will show you how to add your own custom list of featured octopress posts like in <a href="http://coconauts.net#featured-posts">Coconauts</a></p>

<!--more-->


<p>The first thing you need to do is to add a new custom tag to your posts, we will call it <code>featured</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>author: Javier Rengel
</span><span class='line'>published: true
</span><span class='line'>featured: true
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>Create a new template file called <code>featured_posts.html</code> inside your <code>source/_includes</code> folder,
with this content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="row"&gt;
</span><span class='line'>   {% assign featured_count = '' %}
</span><span class='line'>   {% for post in site.posts %}
</span><span class='line'>       {% if post.featured and featured_count.size &lt; 3 %}
</span><span class='line'>          {% capture featured_count %}{{ featured_count }}*{% endcapture %}
</span><span class='line'>           &lt;div class="col-sm-4 col-lg-4 column featured-post"&gt;
</span><span class='line'>              &lt;a class='post-link' href="{{ root_url }}{{ post.url }}"&gt;{{ post.title | titlecase }}&lt;/a&gt;
</span><span class='line'>              &lt;p&gt;{{ post.content | strip_html | condense_spaces | truncate:300 }}&lt;/p&gt;
</span><span class='line'>           &lt;/div&gt;
</span><span class='line'>       {% endif %}
</span><span class='line'>   {% endfor %}
</span><span class='line'>&lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then you can list your three most recent featured posts in every page you want just by adding this code to your markdown or HTML file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% include featured_posts.html %}</span></code></pre></td></tr></table></div></figure>


<p>Just remember to adapt your HTML code and your CSS to your needs (this one is based on <a href="http://getbootstrap.com/">bootstrap</a>).</p>

<h3>Featured posts</h3>

<div class="row">
   
   
       
   
       
          
           <div class="col-sm-4 col-lg-4 column">
              <a class='post-link' href="http://coconauts.net/blog/2016/03/14/happy-pi-day/">Happy Pi Day!</a>
              <p>Do you know what day is today? It&#8217;s 3.14, and because it matches the
decimals in the most beloved irrational number ever, it&#8217;s been called an
[official celebration of number Pi](https://en.wikipedia.org/wiki/Pi_Day). Actually last year it was a most special instance, as it was 3.14.15; an
event &hellip;</p>
           </div>
       
   
       
          
           <div class="col-sm-4 col-lg-4 column">
              <a class='post-link' href="http://coconauts.net/blog/2016/02/04/coconauts-ci-nodejs/">Coconauts CI, a Lightweight CI Built on NodeJS</a>
              <p>CIs are good, as soon as your projects grow, having a continuous integration software
that manages all your apps and deployments is really useful. We have been using a self-hosted
jenkins instance in our server for a few years already, and we have some
[interesting things with it](/blog/2014/09/09/ &hellip;</p>
           </div>
       
   
       
          
           <div class="col-sm-4 col-lg-4 column">
              <a class='post-link' href="http://coconauts.net/blog/2016/01/30/starcraft-mobile-unity3d/">RTS Game Template on Unity3d: StarCraft for Mobile</a>
              <p>We have been just _playing_ with Unity3D for a few months, but we have already tried to build something: a new RTS (Real Time Strategy) game for Desktop and Mobile. But we want to make this game abstract and adaptable, so that it works like an engine, which means we could easily change the models, &hellip;</p>
           </div>
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
       
   
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WatchDuino 2 Is Semifinalist on the 2015 Hackaday Prize]]></title>
    <link href="http://coconauts.net/blog/2015/08/24/watchduino-2-is-semifinalist-on-the-2015-hackaday-prize/"/>
    <updated>2015-08-24T20:18:35+01:00</updated>
    <id>http://coconauts.net/blog/2015/08/24/watchduino-2-is-semifinalist-on-the-2015-hackaday-prize</id>
    <content type="html"><![CDATA[<p><img src="http://coconauts.net/images/posts/hackaday_semifinal.png" /></p>

<p>We are really excited to announce that <a href="https://www.coconauts.net/projects/watchduino2/">WatchDuino 2</a> has passed to
<a href="http://hackaday.com/2015/08/24/100-semifinalists-for-the-2015-hackaday-prize/">the semi-finals of the 2015 edition of the Hackaday Prize</a>!
It was selected amongst the best 100 of a total of more than 900 projects.
To see this kind of recognition out of a community that we admire is
absolutely thrilling, thank you so much =)</p>

<p>This means that now we will have to give our best we want to be good enough
to be in the finals. Many other excellent projects are competing!</p>

<p>Keep an eye on the <a href="https://hackaday.io/project/7244-watchduino2">project page on Hackaday</a>,
as it is likely to be holding exciting updates and advancements during the
following month. And give us your skulls and likes if you have an account! =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updates on 404-games]]></title>
    <link href="http://coconauts.net/blog/2015/08/08/404-updates/"/>
    <updated>2015-08-08T23:00:00+01:00</updated>
    <id>http://coconauts.net/blog/2015/08/08/404-updates</id>
    <content type="html"><![CDATA[<p>Last week we implemented <a href="http://coconauts.net/projects/404games">gamified 404 pages</a> into
coconauts. Everytime you hit a 404, instead of getting a boring
image and cursing for your misfortune, you&rsquo;ll now get a classic videogame
to make you forget your disappointment.</p>

<p>We initially implemented pacman and space-invaders style games, but
we&rsquo;ve now added a snake game on top of them, and not only that, the
source code for them is now public on
<a href="https://github.com/coconauts/404-games">a github repo</a>, so you can
use them in your own website if you want.</p>

<p><a href="http://coconauts.net/404">Happy mislinking</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Manager]]></title>
    <link href="http://coconauts.net/blog/2015/08/01/game-manager/"/>
    <updated>2015-08-01T16:53:19+01:00</updated>
    <id>http://coconauts.net/blog/2015/08/01/game-manager</id>
    <content type="html"><![CDATA[<p>This project has been available for a long time as a opensource software in <a href="https://github.com/coconauts/game-manager">github</a>,
but we didn&rsquo;t do any official announcement or anything as we have been testing it and adding
more features.</p>

<p>Today we present a software for managing all your games and emulators in your computer.</p>

<p><img src="http://coconauts.net/projects/game-manager/sim-city.png" /></p>

<!--more-->


<p>In the past we tried with software like XMBC Game collection,
but it takes ages to download all the covers and info from the games.
We also tried <a href="http://malafe.net/">MALA</a> a <a href="http://coconauts.net/projects/game-manager/old-arcade.png">long time ago</a>,
and it was great, but a bit old and only available on Windows.
So we decided to build one in Node.js with a lot of features that we wanted.</p>

<h2>Features</h2>

<ul>
<li>Multiplatform lightweight app built in node.js and sqlite</li>
<li>Immediately list all your games without indexing or downloading anything</li>
<li>Mark games as &ldquo;In progress&rdquo;, &ldquo;Finished&rdquo; or &ldquo;Favorite&rdquo; for faster access</li>
<li>Search by name</li>
<li>Support keyboard controls</li>
<li>Download info from the games in real time from <a href="http://thegamesdb.net/">thegamesdb.net</a></li>
<li>Read covers and screens from disk</li>
<li>Automatically download missing covers from Google</li>
<li>Execute games from the app directly (you just need to set the exec argument)</li>
<li>Works with everything (even MAME games, windows or scummvm )</li>
<li>Open source</li>
<li>Compact and simple design</li>
<li>Record your gameplays</li>
</ul>


<h2>Demo</h2>

<iframe width="100%" height="450" src="https://www.youtube.com/embed/3ThvGbx2ku4" frameborder="0" allowfullscreen></iframe>


<h2>How to run</h2>

<p>You have the full documentation in the <a href="https://github.com/coconauts/game-manager">repo</a>.</p>

<p>But as it&rsquo;s a Node.js application, as soon as you have node already installed in your machine
you only need to do:</p>

<pre><code>npm install &amp;&amp; node app.js
</code></pre>

<p>Once it&rsquo;s running, open a browser <code>localhost:8888</code> and start adding your platforms</p>

<h2>Future plans</h2>

<p>This application was the first thing we built in Node.js,
so the code can be improved as we have leart a lot about this language in the last few months.</p>

<p>The platform is quite useful and stable, but we can still work on new features like
customizable skins, online storage for gamestates, or even online gameplay so you can run your Game manager server
but play anywhere just like Sony or Steam do.</p>

<p>Just let us know what&rsquo;s your favorite feature and we will focus on that!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[404 Games]]></title>
    <link href="http://coconauts.net/blog/2015/07/31/404-games/"/>
    <updated>2015-07-31T00:52:00+01:00</updated>
    <id>http://coconauts.net/blog/2015/07/31/404-games</id>
    <content type="html"><![CDATA[<p>Getting a <a href="http://coconauts.net/404">404</a> page is not something enjoyable,
that&rsquo;s why we wanted to build something nice for anyone that lands in this
unexpected place.</p>

<p>So we built a few simple classic games in HTML5 + Canvas, and you will get randomly
one of these everytime you land in our <a href="http://coconauts.net/404">404</a> page.</p>

<!--more-->


<p>All our 404 games will be published in our <a href="http://coconauts.net/projects/404games">project page</a></p>

<h2>Space invaders</h2>

<p><img src="http://coconauts.net/projects/404games/space-invaders.png" class="screenshot" /></p>

<p><a href="http://coconauts.net/html5/space-invaders">Test me</a></p>

<h2>Pacman</h2>

<p><img src="http://coconauts.net/projects/404games/pacman.png" class="screenshot" /></p>

<p><a href="http://coconauts.net/html5/pacman">Test me</a></p>

<p>Fortunately, 404 pages don&rsquo;t happen too often in <a href="http://coconauts.net">Coconauts</a>,
but still, this is an improvement over the previous version,
and we had fun building this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easily Create 8-bit Sound Effects]]></title>
    <link href="http://coconauts.net/blog/2015/07/06/easily-create-8-bit-sound-effects/"/>
    <updated>2015-07-06T21:10:17+01:00</updated>
    <id>http://coconauts.net/blog/2015/07/06/easily-create-8-bit-sound-effects</id>
    <content type="html"><![CDATA[<p>In a past post we&rsquo;ve shown you <a href="https://www.coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">how to make 8-bit music</a>,
which you might want to use in a game. But of course, if you are having
8-bit music, you&rsquo;ll want your game sound effects to match as well.</p>

<p>In this post we&rsquo;ll show you how to generate 8-bit style sound effects for
for games using a very simple free tool called <a href="http://www.bfxr.net/">bfxr</a>.
No audio or DSP knowledge needed!</p>

<!--more-->


<p><a href="http://www.bfxr.net/">bfxr</a> is a generator for 8-bit style sound effects.
It&rsquo;s also completely idiot proof, and you don&rsquo;t even need to install it,
because it&rsquo;s available as a web app (though you can if you want to).</p>

<p><img src="http://coconauts.net/images/posts/chiptune/bfxr.png" /></p>

<p>Simply pick a category to generate a randomized sound that
will look legit enough, and the parameters used to synthesize it will
get filled out. In n00b mode you simply keep clicking until just the
right sound appears, and if you&rsquo;re audio savvy you can even tune the
parameters to your will. When you&rsquo;re satisfied, just save the sound in wav
format and you&rsquo;re done.</p>

<p>You&rsquo;ll probably want to do some format conversion with your bfxr
generated sounds though, as wav is an uncompressed format that eats up a
ridiculous amount of space. For this, use any audio converting tool, like
ffmpeg:</p>

<pre><code>ffmpeg -i audio.wav  -acodec libvorbis audio.ogg
</code></pre>

<p>Actually, since we don&rsquo;t care very much about the quality of the audio
(if fact, the lower it is, it will look more authentic!), we can use
the same tool to downsample the track (<code>-ar</code> flag sets the sample rate,
and <code>-ab</code> sets the bitrate) and turn it to mono (<code>-ac</code> flag sets the
number of channels):</p>

<pre><code>ffmpeg -i audio.ogg -acodec libvorbis -ac 1 -ab 64000 -ar 22050 output.ogg
</code></pre>

<p>In this case we&rsquo;ve reduced the bitrate to 64k, the sample rate to half the
usual value, and the channels to just one.</p>

<p>The same downsampling process can also be applied to yor 8-bit game music actually.
It shouldn&rsquo;t hurt the music quality and it will noticeably reduce the
size of your assets, something you surely want if you&rsquo;re doing mobile
development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building 3D Virtual Reality Games With Unity3D]]></title>
    <link href="http://coconauts.net/blog/2015/06/20/3d-virtual-reality-demo-with-unity/"/>
    <updated>2015-06-20T16:53:19+01:00</updated>
    <id>http://coconauts.net/blog/2015/06/20/3d-virtual-reality-demo-with-unity</id>
    <content type="html"><![CDATA[<p>All the big companies like Samsung, Sony and even Facebook are doing their best to build the
ultimate Virtual Reality headset and make it standard.</p>

<p>Once they are in the market, we (indie game developers) need to be ready to build VR games
so everyone can enjoy their fancy expensive devices.</p>

<p>So, in order to start playing with them, you could either pay 350$ dollars for a <a href="https://www.oculus.com/order/">Oculus Rift developing kit</a>,
or you could get one of those cheap kits from <a href="http://www.aliexpress.com/item/High-quality-DIY-Google-Cardboard-Virtual-Reality-VR-Mobile-Phone-3D-Glasses-for-5-0-Screen/32301733749.html?s=p">Google</a>
or even <a href="https://twitter.com/rephus/status/587297530045714432">build your own</a>, and start building games in Unity3D.</p>

<p><img src="http://coconauts.net/images/posts/3d-island-demo/img1.png" /></p>

<!--more-->


<p>We recently built a VR technical demo in Unity and it&rsquo;s available on <a href="https://play.google.com/store/apps/details?id=net.coconauts.island3d">Play store</a>.
The purpose of this demo was built to test the performance of a Virtual Reality environment in Unity3D.</p>

<p><img src="http://coconauts.net/images/posts/3d-island-demo/img2.png" /></p>

<p>It uses the scene and models from the <a href="http://unity3d.com/showcase/live-demos#tropical-paradise">Tropical Paradise Unity demo</a>,</p>

<p>But because this demo was built for Unity v3 and we use 4.6 we had to fix some parts of the code to make it compatible,
also we replaced the water effect completely with a new one for the free version.</p>

<p>Also, it&rsquo;s optimized for mobile platforms and we included some simple features to make it VR ready.</p>

<p>We noticed that the game runs great in PC, and OK (~30FPS) in a modern phone even with high resolution and good quality.
The bottleneck is the number of details and shadows in the scene, or drawCalls in unity.</p>

<p>But you can try by your own by <a href="https://play.google.com/store/apps/details?id=net.coconauts.island3d">downloading</a> the game into your phone.</p>

<p>If you have a question or want more details about our demo, please let us know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why You Shouldn't Use Arduino UNO]]></title>
    <link href="http://coconauts.net/blog/2015/05/18/why-you-should-not-use-arduino-uno/"/>
    <updated>2015-05-18T22:53:19+01:00</updated>
    <id>http://coconauts.net/blog/2015/05/18/why-you-should-not-use-arduino-uno</id>
    <content type="html"><![CDATA[<p>Arduino is an awesome platform, that allows you to create almost
everything you can imagine with a really tiny investment and some
basic hardware knowledge.</p>

<p>Everyone starts using Arduino UNO for development, and we see
<em>a lot</em> of projects using this board, but there are a few good
reasons why you shouldn&rsquo;t use UNO&hellip;</p>

<p><img src="http://coconauts.net/images/posts/why-not-uno/arduino_hand.jpg" /></p>

<!--more-->


<h2>Arduino UNO is expensive</h2>

<p>Arduino UNO is one of the most expensive boards that features the
ATMega328 compared with other Arduino models like Mini, Micro,
or Lilypad. There are
<a href="http://www.arduino.cc/en/Main/Products">tons of them to choose from</a>)!</p>

<table>
<thead>
<tr>
<th></th>
<th> Model       </th>
<th> Price (on store.arduino.cc) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> UNO         </td>
<td> 20€</td>
</tr>
<tr>
<td></td>
<td> Micro       </td>
<td> 18€</td>
</tr>
<tr>
<td></td>
<td> Mini        </td>
<td> 14€</td>
</tr>
<tr>
<td></td>
<td> Lillypad    </td>
<td> 16€</td>
</tr>
</tbody>
</table>


<p>Note that these prices come from the
<a href="http://store.arduino.cc">oficial Arduino store</a>. However you can
easily find compatible clonic boards on Amazon, Ebay or Aliexpress,
at a fraction of the price.</p>

<p>You could also use a bare ATMega328 like we did in our
<a href="https://www.coconauts.net/projects/watchduino/">first Watchduino</a>
or in our
<a href="https://www.coconauts.net/blog/2014/10/18/arduino-radio-improvements-low-consumption/">light sensor with RF24 radio module</a>.</p>

<h2>Arduino UNO is big</h2>

<p>Arduino UNO is a big board, and you probably going to use a bread board
next to it, which makes your whole development prototype really complex.</p>

<p>Instead of that, use a Nano or Micro attached to a bread board directly.</p>

<p><img src="http://coconauts.net/images/posts/why-not-uno/uno_vs_nano.jpeg" /></p>

<h2>Arduino UNO is not power-efficient</h2>

<p>Most of the projects built with Arduino will be wireless and
battery-powered, so the device should be power-efficient,
but Arduino UNO is not.</p>

<p>Because Arduino UNO has a lot of hardware you don&rsquo;t need, it consumes
<em>a lot</em> more than its brothers:</p>

<ul>
<li>USB controller</li>
<li>Too many leds</li>
</ul>


<p>However, boards like Lilypad or Mini don&rsquo;t have a USB controller,
which reduces its normal consumption a few mAh, eg:</p>

<ul>
<li>Standalone consumption for UNO: 28mAh</li>
<li>Standalone consumption for Mini: 13mAh</li>
</ul>


<p>This measures have been taken when running a dummy sketch
that does nothing (not even blinking a LED). If you make
heavier computations or put the Arduino to sleep, measurements
will vary.</p>

<h2>Arduino UNO uses USB-B connector</h2>

<p>Seriously?? in this day and age?</p>

<h2>Arduino UNO is not designed for production</h2>

<p>Because it&rsquo;s big, and has a very high consumption, you shouldn&rsquo;t
ever use it in a prototype, like a remote controlled device, or a
batery-powered-sensor, or a
 <a href="https://www.coconauts.net/projects/watchduino2/">smartwatch</a>.</p>

<p>Also, you probably don&rsquo;t want to develop in a hardware that won&rsquo;t
match the final product specs, do you ?</p>

<h2>Conclussions</h2>

<p>The only reason why you could want to use UNO is to use a shield,
but in most of the cases they&rsquo;re not worth it.</p>

<p>Our personal preference is Arduino Mini: it&rsquo;s small, cheap and has
the lowest consumption in its family.</p>

<p>So do yourself a favor and use any of the other boards available
instead of using UNO again.</p>

<p><img src="http://coconauts.net/images/posts/why-not-uno/arduino_family.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Automatic Watering System With Arduino]]></title>
    <link href="http://coconauts.net/blog/2015/04/22/simple-automatic-watering-system-arduino/"/>
    <updated>2015-04-22T22:57:19+01:00</updated>
    <id>http://coconauts.net/blog/2015/04/22/simple-automatic-watering-system-arduino</id>
    <content type="html"><![CDATA[<p>Summer is comming and we may need to water our plants almost everyday,
but we should take advantage of technology and let machines water our plants for us.</p>

<p>Today we will show you how to build a simple and smart watering system using Arduino.</p>

<!--more-->




<table class='summary' border=1>
<tr><th>Description</th><th>Materials</th></tr>
<tr>
<td>

  In this tutorial we will create a simple watering system using basic Arduino code,
  with sensors and some digital outputs.
  
  <img src="http://coconauts.net/images/posts/automatic-watering/final.jpg" style="width:400px"/>
  
</td>
<td>

<ul>
  <li>A water pump</li>
  <li>A humidity sensor (optional)</li>
  <li>Arduino (Mini, Nano, UNO, etc)</li>
  <li>An NPN transistor</li>
  <li>Water</li>
  <li>Plants (optional)</li>
</ul>

<strong> Links </strong><br/>

<ul>
  <li><a href='https://github.com/coconauts/automatic-watering'>Source</a></li>
</ul>

<strong> Difficulty </strong>

<div class='rating-2'></div>

</td>
</tr>
</table>


<br/>


<p>  <iframe width="100%" height="450" src="https://www.youtube.com/embed/2DbnXBLUOXo" frameborder="0" allowfullscreen></iframe></p>

<p>First you need to enable your water pump from Arduino.
Some of them may have different current requirements, mine works on  current: 0.05A~0.12A.
However, Arduino I/O pins have
some <a href="http://playground.arduino.cc/Main/ArduinoPinCurrentLimitations">current limitations</a> (up to 40.0 mA),
therefore we will use a transistor as a switching device, connected directly to VCC.</p>

<p>You can see all the details in the schema below.</p>

<p><img src="https://raw.githubusercontent.com/coconauts/automatic-watering/master/automatic-watering_bb.png"/></p>

<p>Another thing to mention is that we want our automatic watering system to have two different functions:</p>

<ul>
<li>Time-based: Water the plants every <code>x</code> seconds during <code>y</code> seconds.</li>
<li>Humidity-based: Water the plants everytime it hits a threshold.</li>
</ul>


<p>To pick either of the methods we will use a normal switch that we will read inside the loop in our code.</p>

<p>Here&rsquo;s the Arduino sketch, also available on <a href="https://github.com/coconauts/automatic-watering">github</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define HUMIDITY_SENSOR 10
</span><span class='line'>#define WATER_PUMP 9
</span><span class='line'>#define MODE 4 
</span><span class='line'>#define LED 13  //For notification
</span><span class='line'>
</span><span class='line'>#define HUMIDITY_THRESHOLD 50
</span><span class='line'>#define PUMP_FREQUENCY 1000
</span><span class='line'>#define PUMP_ENABLE_TIME 1000 // Time to be enabled (in ms)
</span><span class='line'>
</span><span class='line'>int mode;
</span><span class='line'>int humidityRead;
</span><span class='line'>long lastTimeActive;
</span><span class='line'>bool pumpEnabled;
</span><span class='line'>
</span><span class='line'>void setup(){
</span><span class='line'>  pinMode(HUMIDITY_SENSOR, INPUT);
</span><span class='line'>  pinMode(WATER_PUMP, OUTPUT); 
</span><span class='line'>  pinMode(LED, OUTPUT); 
</span><span class='line'>
</span><span class='line'>  pinMode(MODE, INPUT); digitalWrite(MODE,HIGH);
</span><span class='line'>  
</span><span class='line'>  disablePump();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void loop(){
</span><span class='line'>  mode = digitalRead(MODE);
</span><span class='line'>  
</span><span class='line'>  if (mode == HIGH) { //time mode
</span><span class='line'>    if (!pumpEnabled && millis() &gt; lastTimeActive + PUMP_FREQUENCY) {
</span><span class='line'>      enablePump();
</span><span class='line'>      lastTimeActive = millis();
</span><span class='line'>    } 
</span><span class='line'>    if (pumpEnabled && millis() &gt; lastTimeActive + PUMP_ENABLE_TIME) {
</span><span class='line'>      disablePump();
</span><span class='line'>      lastTimeActive = millis();
</span><span class='line'>    }
</span><span class='line'>  } else { //Humidity mode
</span><span class='line'>
</span><span class='line'>    humidityRead = analogRead(A0);
</span><span class='line'>    
</span><span class='line'>    if (humidityRead &lt; HUMIDITY_THRESHOLD) {
</span><span class='line'>      if (!pumpEnabled) enablePump();
</span><span class='line'>    } else {
</span><span class='line'>      if (pumpEnabled) disablePump();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  delay(1000);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void enablePump() {
</span><span class='line'>
</span><span class='line'>    digitalWrite(WATER_PUMP, HIGH); 
</span><span class='line'>    digitalWrite(LED, HIGH); 
</span><span class='line'>
</span><span class='line'>    pumpEnabled = true;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>void disablePump() {
</span><span class='line'>
</span><span class='line'>  digitalWrite(WATER_PUMP, LOW); 
</span><span class='line'>  digitalWrite(LED, LOW); 
</span><span class='line'>
</span><span class='line'>  pumpEnabled = false;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t have a humidity sensor (or don&rsquo;t want to use one),
you can remove both (the switch and the sensor) from the schema.</p>

<p>But also, you can use this for watering multiple plants,
or you could use this project for your pets or to wake  up in the morning covered by water in your bed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating TRVE CHIPTUNE With a Tracker]]></title>
    <link href="http://coconauts.net/blog/2015/04/19/creating-trve-chiptune-with-a-tracker/"/>
    <updated>2015-04-19T20:34:31+01:00</updated>
    <id>http://coconauts.net/blog/2015/04/19/creating-trve-chiptune-with-a-tracker</id>
    <content type="html"><![CDATA[<p>Following up with the
<a href="https://www.coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">previous post about chiptune music</a>,
remember what I said about those purists only considering to be TRVE
CHIPTUNE that in the format of Amiga MOD files created with an old
school tracker software? Well, guess what, you can do just that to
create chiptune music the hardcore way.</p>

<!--more-->


<p>This route is certainly not for the faints of heart, but the results
will be really convincing and proper chiptune music, not cheap
imitations. As a matter of fact, when you go out in the wild looking for
chiptune tutorials they are mostly going to point to this approach.</p>

<p>So in the dawn of times, <a href="http://en.wikipedia.org/wiki/Chiptune#Tracker_chiptunes">apparently</a>
Amiga computers had really good sound chips and equally good tracking
software, and this spawned a community of enthusiasts creating chiptune
music with them. Over the years, software trackers came to be for PC,
imitating those of Amiga computers, and these are the ones you can use
to create chiptune music, as was done in the 80s. And with that, I mean
cryptic and hardcore text-based interfaces. Like this one:</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/Fw4Aa0FfuJU" frameborder="0" allowfullscreen></iframe>


<p>That was <a href="http://milkytracker.org/">MilkyTracker</a>, which is actually
the friendliest of trackers that I found (it&rsquo;s also free and available
for Linux). There are <a href="http://woolyss.com/chipmusic-chiptrackers.php">plenty of other options out there though</a>.</p>

<p>If you feel brave enough to step into this path, your experience
wouldn&rsquo;t be complete without some ancient tutorials in glorious static
html websites from a decade ago, so here&rsquo;s some to get you started:</p>

<ul>
<li><a href="http://resources.openmpt.org/tracker_handbook/handbook.htm">The Tracker&rsquo;s Handbook</a></li>
<li><a href="http://amp.dascene.net/faq.php">Amiga Music Preservation FAQ</a></li>
<li><a href="http://chiptuneswin.com/blog/so-you-wanna-make-a-chiptune-2-computer-trackers/">Tutorial at The ChipWIN blog</a></li>
<li><a href="http://woolyss.com/">Woolys</a> is an extensive reference site with tons
of tutorials and documentation about all things chiptune and tracking.</li>
</ul>


<p>Don&rsquo;t forget though that there&rsquo;s a saner way to do it, we&rsquo;ve shown you how in the
<a href="https://www.coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">previous post</a>!</p>
]]></content>
  </entry>
  
</feed>
