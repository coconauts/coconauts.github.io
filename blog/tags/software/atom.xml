<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: software | Coconauts]]></title>
<link href="http://coconauts.net/blog/tags/software/atom.xml" rel="self"/>
<link href="http://coconauts.net/"/>
<updated>2017-05-20T17:54:48+00:00</updated>
<id>http://coconauts.net/</id>
<author>
<name><![CDATA[Coconauts]]></name>
<email><![CDATA[admin@coconauts.net]]></email>
</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Sea-Life: Game for ProcJam 2015]]></title>
<link href="http://coconauts.net/blog/2016/10/05/sea-life-at-procjam/"/>
<updated>2016-10-05T20:54:19+00:00</updated>
<id>http://coconauts.net/blog/2016/10/05/sea-life-at-procjam</id>
<content type="html"><![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Procedurally drawn fishies with balanced stats in our <a href="https://twitter.com/hashtag/procjam?src=hash">#procjam</a> entry. Coming next: changing their shape accordingly! <a href="https://t.co/dzoFheVaO1">pic.twitter.com/dzoFheVaO1</a></p>&mdash; Coconauts (@coconauts) <a href="https://twitter.com/coconauts/status/664208953522462720">November 10, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>On 10 Nov 2015 we posted a procedurally generated game featuring
websockets for the Procjam 2015 (done only in 2 days). Almost a year ago, we decided to create a post for it, just for the record (see the original post <a href="https://marbu.itch.io/sea-life">here</a>)</p>

<p>Play the game <a href="http://html5.coconauts.net/sealife/">here</a> or check the <a href="https://github.com/coconauts/sea-life">Github repo</a></p>

<!--more-->


<h2>Description</h2>

<p>This game attempted to be an iteration on a similar idea that we did for a Ludum Dare, <a href="http://ludumdare.com/compo/ludum-dare-24/?action=preview&amp;uid=16605">&ldquo;Sea Evolution&rdquo;</a></p>

<p>In the game you are sea creature that needs to survive in your ecosystem. You get hungry, you need to eat, and you can lay eggs to perpetuate your species. Different sea creatures have different attributes, which determine who can eat and get eaten by.</p>

<p>Unfortunately we didn&rsquo;t have a lot of time during this week, so we couldn&rsquo;t develop or polish as much as we wanted! Here&rsquo;s what we managed to do:</p>

<h2>Infinite game world</h2>

<p>In the original sea evolution there was no scrolling. But we wanted to make it feel like the endless sea, so in this one we made a scrolling world that gets autopopulated with new fishes as you advance through it.</p>

<p>Our original plan was to emulate a sea bottom, which we would also autopopulate with seaweeds, reefs, or even dark abyss areas, or polluted areas where only poison-resistant fishes would be able to habitate. But we didn&rsquo;t have time for all this! So instead you are just traversing the boring open ocean.</p>

<h2>100% canvas, randomized fish shapes</h2>

<p>Everything is drawn with canvas, no sprites! It&rsquo;s the first time we actually do this sort of thing, and it was challenging but quite fun. This allows for some fun features, such as being able to alter the shape of the fishes programatically. Each fish will randomly be given a distinct color and shape.</p>

<h2>Autogenerated fish statistics</h2>

<p>Fishes are created with a set of stats: speed, attack power and defense. These are represented by the gauge meters below the fish. Normally you should be safe to attack a fish if it has less attack and defense than you do (otherwise the other fish might kill you!). The stats are balanced, so that if you get more of one you&rsquo;ll get less of the others.</p>

<h2>Fish growth</h2>

<p>In the original Sea Evolution, fishes went through several life stages, from egg to adult. On each life stage their stats were bumped. You were always able to survive by eating the fishes that were in lower life stages, beacause they had lower stats. On adult form, fishes can lay eggs to perpetuate there species.</p>

<p>In this game we have implemented the life stages, and you can notice that after a certain amount of time the stats are bumped. However we didn&rsquo;t have timeto alter the appearance of the fishes when this happens.</p>

<h2>Controls</h2>

<p>You can move with the arrow keys or the mouse. The enemy fishes randomly pick where to go, or if they are close to other fish they will chase it to eat it. Sometimes this results in all of the enemies gathering together in one point eating each other out.</p>

<p>The player fish also follows the same behavior if you don&rsquo;t tell it where to go. This is a bit confusing, yes, but we didn&rsquo;t have time to change it.</p>

<h2>Descendants</h2>

<p>The original idea for Sea Life was to be able to perpetuate your species over the rest. You would be able to lay eggs and have descendancy, and your success in life (ie, your game score) would be measured to how many descendants did you managed to get until you died. How successful you would be in your species conquering the sea world would depend in both your ability and the statistics autogenerated for your sea species.</p>

<p>So we did implement this&hellip; partially. You will have children from time to time, and they will follow you along. But actually they don&rsquo;t really have any stats, or count as real fishes. But they make you feel less lonely, no?</p>

<h2>Websockets</h2>

<p>Yay! Another experiment. We wanted to make this a multiplayer experience, using websockets. When you join the game you will connect to a server keeping track of all the players, and you will receive their possitions. So you might cross another human while playing!</p>

<p>It&rsquo;s easy to identify a human: they will have no stats displaying (because you can&rsquo;t really eat them), and they would have an autogenerated name, in the pattern &ldquo;adjective + sea animal&rdquo; (in the spirit of Metal Gear Solid troop names, or Ubuntu distributions)</p>

<p>And that is basically it. Probably too buggy to be playable for a long time, but a fun experiment with some forms of procedural generation =)</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Retrophies: Achievements System for Emulators]]></title>
<link href="http://coconauts.net/blog/2016/08/01/retrophies/"/>
<updated>2016-08-01T20:54:19+00:00</updated>
<id>http://coconauts.net/blog/2016/08/01/retrophies</id>
<content type="html"><![CDATA[<p>Play now at <a href="http://retrophies.win">retrophies.win</a>!</p>

<p>If there’s one thing that has become a de-facto standard in the gaming industry during the last decade this is game achievements, trophies, or whatever you may call them. Not only on console games, but Apple and Android also provide facilities to integrate this features in games published on their platforms. Many games even implement a custom achievements system specific for that game in isolation.</p>

<p>There seems to be an exception though. Retro games. Obviously a game from 20 years ago was not designed with achievements in mind, but even when companies re-edit old games, they seem to be happy enough charging you current day prices for what it is often an effort-less dump of the classic game, which you may even wonder if they’re running though an emulator. Do you expect the new <a href="https://www.nintendo.com/nes-classic">mini-NES</a> will be anything more than this?</p>

<p>At Coconauts we love classic games, as well as emulators. So we’ve wondered… how would it be if your favourite emulators had some of the functions of today’s game platforms, like achievements?</p>

<p>This what Retrophies is trying to achieve. And for the first proof of concept we’re bringing achievements to Super Mario Bros.</p>

<!--more-->


<p>You can see Retrophies in action <a href="http://retrophies.win">here</a>. A rom of Super Mario Bros for NES is running on a forked version of JSNES, implementing Retrophies. If you play for a little bit, you should start seeing some notifications for unlocking some achievements, after certain events occur in the game. How many can you get?</p>

<p><img src="https://farm9.staticflickr.com/8674/28062483653_c8da6e86ea_z_d.jpg" alt="achievement"></p>

<p>You may be wondering how all this works. No romhacking is involved, or at least not in the game rom itself. Retrophies is nothing more than a collection of memory registers and values. The emulator implementing Retrophies needs to be constantly inspecting those register in the running game RAM. When the correct value is up, the achievement should be triggered.</p>

<p>```
var achievements = [</p>

<pre><code>//[Memory (0), Value (1) , Title (2), Description (3), Img (4), Triggered (5)]
[0x0770, 1, "Enjoy Retrophies", "Play Super Mario Bros", "mario", false],
[0x0748, 10, "Gold mine", "Collect 10 coins", "coin", false],
[0x075A, 7, "More lives than a cat", "Get 8 lives", "1up", false],
...
</code></pre>

<p>]
```</p>

<p>As you see, the system itself is quite simple. The difficult part comes when figuring out the list of memory values that should trigger achievements. This of course has to be custom-tailored for each individual game, in a reverse engineering process of trial and error, similar to what it takes to discover cheat codes for Game Genie.</p>

<p>Game-hacking utilities come handy for this task. The SMB achievements were obtained using an emulator called FCEUX, which <a href="http://www.fceux.com/web/help/fceux.html?ROMHacking.html">comes with a good bunch of tools</a> used by rom hackers, or speedrunners. Particularly useful for our purposes are a <a href="https://www.youtube.com/watch?v=jfnqxxwlIyo">real time hex editor</a>(pictured below) or the <a href="http://tasvideos.org/EmulatorResources/RamSearch.html">RAM search tool</a>.</p>

<p><img src="https://farm9.staticflickr.com/8835/28600323071_60e66949c8_z_d.jpg" alt="fceux"></p>

<p>We can also take advantage of the <a href="http://gamehacking.org/game/31010">plenty of already existing game cheat codes</a> that people have already deciphered for the game. If we have a cheat code for invincivility setting a particular value in a particular register, we already know the register and the value that we have to inspect if we want to trigger an achievement when getting an invincivility star. There are different formats for game codes, but there are conversors around that will map them in the end to one or several memory locations.</p>

<p>Our Retrophies implementation has only been done for now on the JSNES emulator, as a proof of concept. However, as the system is very simple, as well as <a href="https://github.com/rephus/retrophies">open source</a>, it should be easy for other emulators to implement. Achievement codes can also be obtained for any ROM, given some time and dedication. Watch this space for further news.</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Introducing Gramola, a lightweight web music player]]></title>
<link href="http://coconauts.net/blog/2015/12/31/gramola-release/"/>
<updated>2015-12-31T12:00:00+00:00</updated>
<id>http://coconauts.net/blog/2015/12/31/gramola-release</id>
<content type="html"><![CDATA[<p><img src="https://farm2.staticflickr.com/1513/24000467331_46d15821da_b_d.jpg" /></p>

<p>You may have noticed a mysterious project that has been since the dawn of time
in our front page: <em>&ldquo;Gramola, lightweight online music player,
powered by JPlayer with tons of features&rdquo;</em>. We even have a detailed
<a href="https://coconauts.net/projects/gramola/">project page</a> about it&hellip;
yet disapointingly, you would find no download links or source code there.</p>

<p>We built (and <em>rebuilt</em>!) Gramola some time ago, and we&rsquo;ve been wanting
to find some time to give it some polish and open source it. In fact,
at the begining of the year
<a href="https://coconauts.net/blog/2014/12/31/coconauts-2014-retrospective/">we promised you</a>
that we would get it out in 2015. So to honor our words, here it is!</p>

<p>Read details about it on the <a href="https://coconauts.net/projects/gramola/">project page</a>,
or head directly to the <a href="https://github.com/coconauts/gramola">Github repository</a>
for code and install instructions.</p>

<p>Happy music listening in 2016!</p>
]]></content>
</entry>

</feed>