<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: arduino | Coconauts]]></title>
<link href="http://coconauts.github.io/blog/tags/arduino/atom.xml" rel="self"/>
<link href="http://coconauts.github.io/"/>
<updated>2016-03-14T14:53:54+00:00</updated>
<id>http://coconauts.github.io/</id>
<author>
<name><![CDATA[Coconauts]]></name>
<email><![CDATA[admin@coconauts.net]]></email>
</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Hackaday price 2015 retrospective]]></title>
<link href="http://coconauts.github.io/blog/2015/10/06/hackaday-price-2015-retrospective/"/>
<updated>2015-10-06T22:40:34+01:00</updated>
<id>http://coconauts.github.io/blog/2015/10/06/hackaday-price-2015-retrospective</id>
<content type="html"><![CDATA[<p><img src='https://farm1.staticflickr.com/584/21381222983_a64f947c8d_o_d.png' align='right'/></p>

<p>You may have noticed that the blog has been quite quiet during the last month.
The reason being we were focusing our efforts on doing some epic Watchduino
development, as <a href="https://hackaday.io/project/7244-watchduino2">contestants for the Hackaday Prize 2015</a>.
Sad news in the end though, as we didn&rsquo;t make it to the finals.</p>

<p>But that&rsquo;s ok though. Regardless of the result, this has been a good excercise
for us, and the contest has pushed us to keep working hard on the
<a href="/projects/watchduino2">Watchduino</a> project. That&rsquo;s why we want to
sum up all we have learned and all we have improved on the project during
the course of the contest.</p>

<!-- more -->


<h3>3D Case</h3>

<p><img class='screenshot' src='https://farm1.staticflickr.com/760/21814249490_2bfe5bf2b9_z_d.jpg'/>
<img class='screenshot' src='https://farm6.staticflickr.com/5717/21815509489_5531e2b080_z_d.jpg'/></p>

<p>One of the things in our TODO list was to build a proper 3D case for our watch,
and thanks to our <a href="https://twitter.com/rephus/status/571811583602647040">3D printer</a> we managed to build a wearable prototype.</p>

<p>We also introduced the Smart Strap design which allows us to keep some of the
electronic components spread along the strap, keeping the watch face smaller.</p>

<p>Our first case design, from a few months ago, was done in <a href="https://www.blender.org/">Blender</a>,
however we&rsquo;ve now switched to <a href="https://tinkercad.com/things/gG641gG1b4c">Tinkercad</a> as it&rsquo;s a great web platform for doing
awesome 3D models really quickly.</p>

<p>We also designed an additional strap prototype using a flexible strap, that we
plan to 3D print soon enough.</p>

<h3>Migration to Cordova</h3>

<p><img class='screenshot' src='https://farm1.staticflickr.com/694/21815557799_9d65cd5172_z_d.jpg'/>
<img class='screenshot' src='https://farm1.staticflickr.com/668/21814312750_9f80cebaa1_b_d.jpg'/></p>

<p>A few weeks before we joined the contest, we started migrating the existing
Android companion app, written natively, to the Cordova framework.</p>

<p>The reason for this is because Cordova seems a better platform for us, based
on HTML5 + JS, and multiplatform. It&rsquo;s easier and faster to develop with,
the codebase is smaller, and in general we are quite happy with it!</p>

<p>We finally migrated all the code with a better design by the end of August,
and we even introduced new functionality.</p>

<h3>Showcase videos</h3>

<p>We made two videos to showcase the capabilities of the watch.</p>

<iframe width="100%" height="500" src="https://www.youtube.com/embed/n-ubg1R2e-A" frameborder="0" allowfullscreen></iframe>




<iframe width="100%" height="500" src="https://www.youtube.com/embed/LVE85OxWGzs" frameborder="0" allowfullscreen></iframe>


<h3>Open source code and documentation</h3>

<p>One of the requirements of the project was to release our code and build our
documentation so everyone can create a new Watchduino from scratch.</p>

<p>This has been in our roadmap for ages, so it was a good excuse to clean up
the code a bit an make it public.</p>

<p>Feel free to <a href="https://github.com/coconauts/watchduino2">clone our project</a>, and to make pull request to improve our own.</p>

<p>Be warned though: the codebase is still under heavy development, so things
might change drastically from one day to the next!</p>

<h3>Next steps</h3>

<p>The community also helped us to improve our watch architecture and we are keen on
trying different approaches so Watchduino can be even better than it&rsquo;s now.</p>

<p>One of the main objectives is to improve the Bluetooth connectivity and
the power consumption. Another one is to make an app creation framework that is
lean and easy to use.</p>

<p>Stay tuned for more updates, are we are definitely not done with our
Watchduino development!</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[WatchDuino 2 is semifinalist on the 2015 Hackaday Prize]]></title>
<link href="http://coconauts.github.io/blog/2015/08/24/watchduino-2-is-semifinalist-on-the-2015-hackaday-prize/"/>
<updated>2015-08-24T20:18:35+01:00</updated>
<id>http://coconauts.github.io/blog/2015/08/24/watchduino-2-is-semifinalist-on-the-2015-hackaday-prize</id>
<content type="html"><![CDATA[<p><img src="http://coconauts.github.io/images/posts/hackaday_semifinal.png" /></p>

<p>We are really excited to announce that <a href="https://www.coconauts.net/projects/watchduino2/">WatchDuino 2</a> has passed to
<a href="http://hackaday.com/2015/08/24/100-semifinalists-for-the-2015-hackaday-prize/">the semi-finals of the 2015 edition of the Hackaday Prize</a>!
It was selected amongst the best 100 of a total of more than 900 projects.
To see this kind of recognition out of a community that we admire is
absolutely thrilling, thank you so much =)</p>

<p>This means that now we will have to give our best we want to be good enough
to be in the finals. Many other excellent projects are competing!</p>

<p>Keep an eye on the <a href="https://hackaday.io/project/7244-watchduino2">project page on Hackaday</a>,
as it is likely to be holding exciting updates and advancements during the
following month. And give us your skulls and likes if you have an account! =)</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Why you shouldn't use Arduino UNO]]></title>
<link href="http://coconauts.github.io/blog/2015/05/18/why-you-should-not-use-arduino-uno/"/>
<updated>2015-05-18T22:53:19+01:00</updated>
<id>http://coconauts.github.io/blog/2015/05/18/why-you-should-not-use-arduino-uno</id>
<content type="html"><![CDATA[<p>Arduino is an awesome platform, that allows you to create almost
everything you can imagine with a really tiny investment and some
basic hardware knowledge.</p>

<p>Everyone starts using Arduino UNO for development, and we see
<em>a lot</em> of projects using this board, but there are a few good
reasons why you shouldn&rsquo;t use UNO&hellip;</p>

<p><img src="http://coconauts.github.io/images/posts/why-not-uno/arduino_hand.jpg" /></p>

<!--more-->


<h2>Arduino UNO is expensive</h2>

<p>Arduino UNO is one of the most expensive boards that features the
ATMega328 compared with other Arduino models like Mini, Micro,
or Lilypad. There are
<a href="http://www.arduino.cc/en/Main/Products">tons of them to choose from</a>)!</p>

<table>
<thead>
<tr>
<th></th>
<th> Model       </th>
<th> Price (on store.arduino.cc) </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> UNO         </td>
<td> 20€</td>
</tr>
<tr>
<td></td>
<td> Micro       </td>
<td> 18€</td>
</tr>
<tr>
<td></td>
<td> Mini        </td>
<td> 14€</td>
</tr>
<tr>
<td></td>
<td> Lillypad    </td>
<td> 16€</td>
</tr>
</tbody>
</table>


<p>Note that these prices come from the
<a href="http://store.arduino.cc">oficial Arduino store</a>. However you can
easily find compatible clonic boards on Amazon, Ebay or Aliexpress,
at a fraction of the price.</p>

<p>You could also use a bare ATMega328 like we did in our
<a href="https://www.coconauts.net/projects/watchduino/">first Watchduino</a>
or in our
<a href="https://www.coconauts.net/blog/2014/10/18/arduino-radio-improvements-low-consumption/">light sensor with RF24 radio module</a>.</p>

<h2>Arduino UNO is big</h2>

<p>Arduino UNO is a big board, and you probably going to use a bread board
next to it, which makes your whole development prototype really complex.</p>

<p>Instead of that, use a Nano or Micro attached to a bread board directly.</p>

<p><img src="http://coconauts.github.io/images/posts/why-not-uno/uno_vs_nano.jpeg" /></p>

<h2>Arduino UNO is not power-efficient</h2>

<p>Most of the projects built with Arduino will be wireless and
battery-powered, so the device should be power-efficient,
but Arduino UNO is not.</p>

<p>Because Arduino UNO has a lot of hardware you don&rsquo;t need, it consumes
<em>a lot</em> more than its brothers:</p>

<ul>
<li>USB controller</li>
<li>Too many leds</li>
</ul>


<p>However, boards like Lilypad or Mini don&rsquo;t have a USB controller,
which reduces its normal consumption a few mAh, eg:</p>

<ul>
<li>Standalone consumption for UNO: 28mAh</li>
<li>Standalone consumption for Mini: 13mAh</li>
</ul>


<p>This measures have been taken when running a dummy sketch
that does nothing (not even blinking a LED). If you make
heavier computations or put the Arduino to sleep, measurements
will vary.</p>

<h2>Arduino UNO uses USB-B connector</h2>

<p>Seriously?? in this day and age?</p>

<h2>Arduino UNO is not designed for production</h2>

<p>Because it&rsquo;s big, and has a very high consumption, you shouldn&rsquo;t
ever use it in a prototype, like a remote controlled device, or a
batery-powered-sensor, or a
 <a href="https://www.coconauts.net/projects/watchduino2/">smartwatch</a>.</p>

<p>Also, you probably don&rsquo;t want to develop in a hardware that won&rsquo;t
match the final product specs, do you ?</p>

<h2>Conclussions</h2>

<p>The only reason why you could want to use UNO is to use a shield,
but in most of the cases they&rsquo;re not worth it.</p>

<p>Our personal preference is Arduino Mini: it&rsquo;s small, cheap and has
the lowest consumption in its family.</p>

<p>So do yourself a favor and use any of the other boards available
instead of using UNO again.</p>

<p><img src="http://coconauts.github.io/images/posts/why-not-uno/arduino_family.jpg" /></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Simple automatic watering system with Arduino]]></title>
<link href="http://coconauts.github.io/blog/2015/04/22/simple-automatic-watering-system-arduino/"/>
<updated>2015-04-22T22:57:19+01:00</updated>
<id>http://coconauts.github.io/blog/2015/04/22/simple-automatic-watering-system-arduino</id>
<content type="html"><![CDATA[<p>Summer is comming and we may need to water our plants almost everyday,
but we should take advantage of technology and let machines water our plants for us.</p>

<p>Today we will show you how to build a simple and smart watering system using Arduino.</p>

<!--more-->




<table class='summary' border=1>
<tr><th>Description</th><th>Materials</th></tr>
<tr>
<td>

  In this tutorial we will create a simple watering system using basic Arduino code,
  with sensors and some digital outputs.
  
  <img src="http://coconauts.github.io/images/posts/automatic-watering/final.jpg" style="width:400px"/>
  
</td>
<td>

<ul>
  <li>A water pump</li>
  <li>A humidity sensor (optional)</li>
  <li>Arduino (Mini, Nano, UNO, etc)</li>
  <li>An NPN transistor</li>
  <li>Water</li>
  <li>Plants (optional)</li>
</ul>

<strong> Links </strong><br/>

<ul>
  <li><a href='https://github.com/coconauts/automatic-watering'>Source</a></li>
</ul>

<strong> Difficulty </strong>

<div class='rating-2'></div>

</td>
</tr>
</table>


<br/>


<p>  <iframe width="100%" height="450" src="https://www.youtube.com/embed/2DbnXBLUOXo" frameborder="0" allowfullscreen></iframe></p>

<p>First you need to enable your water pump from Arduino.
Some of them may have different current requirements, mine works on  current: 0.05A~0.12A.
However, Arduino I/O pins have
some <a href="http://playground.arduino.cc/Main/ArduinoPinCurrentLimitations">current limitations</a> (up to 40.0 mA),
therefore we will use a transistor as a switching device, connected directly to VCC.</p>

<p>You can see all the details in the schema below.</p>

<p><img src="https://raw.githubusercontent.com/coconauts/automatic-watering/master/automatic-watering_bb.png"/></p>

<p>Another thing to mention is that we want our automatic watering system to have two different functions:</p>

<ul>
<li>Time-based: Water the plants every <code>x</code> seconds during <code>y</code> seconds.</li>
<li>Humidity-based: Water the plants everytime it hits a threshold.</li>
</ul>


<p>To pick either of the methods we will use a normal switch that we will read inside the loop in our code.</p>

<p>Here&rsquo;s the Arduino sketch, also available on <a href="https://github.com/coconauts/automatic-watering">github</a></p>

<p>```</p>

<h1>define HUMIDITY_SENSOR 10</h1>

<h1>define WATER_PUMP 9</h1>

<h1>define MODE 4</h1>

<h1>define LED 13  //For notification</h1>

<h1>define HUMIDITY_THRESHOLD 50</h1>

<h1>define PUMP_FREQUENCY 1000</h1>

<h1>define PUMP_ENABLE_TIME 1000 // Time to be enabled (in ms)</h1>

<p>int mode;
int humidityRead;
long lastTimeActive;
bool pumpEnabled;</p>

<p>void setup(){
  pinMode(HUMIDITY_SENSOR, INPUT);
  pinMode(WATER_PUMP, OUTPUT);
  pinMode(LED, OUTPUT);</p>

<p>  pinMode(MODE, INPUT); digitalWrite(MODE,HIGH);</p>

<p>  disablePump();
}</p>

<p>void loop(){
  mode = digitalRead(MODE);</p>

<p>  if (mode == HIGH) { //time mode</p>

<pre><code>if (!pumpEnabled &amp;&amp; millis() &gt; lastTimeActive + PUMP_FREQUENCY) {
  enablePump();
  lastTimeActive = millis();
} 
if (pumpEnabled &amp;&amp; millis() &gt; lastTimeActive + PUMP_ENABLE_TIME) {
  disablePump();
  lastTimeActive = millis();
}
</code></pre>

<p>  } else { //Humidity mode</p>

<pre><code>humidityRead = analogRead(A0);

if (humidityRead &lt; HUMIDITY_THRESHOLD) {
  if (!pumpEnabled) enablePump();
} else {
  if (pumpEnabled) disablePump();
}
</code></pre>

<p>  }</p>

<p>  delay(1000);
}</p>

<p>void enablePump() {</p>

<pre><code>digitalWrite(WATER_PUMP, HIGH); 
digitalWrite(LED, HIGH); 

pumpEnabled = true;
</code></pre>

<p>}</p>

<p>void disablePump() {</p>

<p>  digitalWrite(WATER_PUMP, LOW);
  digitalWrite(LED, LOW);</p>

<p>  pumpEnabled = false;
}</p>

<p>```</p>

<p>If you don&rsquo;t have a humidity sensor (or don&rsquo;t want to use one),
you can remove both (the switch and the sensor) from the schema.</p>

<p>But also, you can use this for watering multiple plants,
or you could use this project for your pets or to wake  up in the morning covered by water in your bed.</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Watchduino 2 first prototype]]></title>
<link href="http://coconauts.github.io/blog/2015/02/26/watchduino2-first-prototype/"/>
<updated>2015-02-26T20:42:14+00:00</updated>
<id>http://coconauts.github.io/blog/2015/02/26/watchduino2-first-prototype</id>
<content type="html"><![CDATA[<p>Five weeks have passed since I built the first wearable prototype of Watchduino 2,
and I would like to share with you my impressions, its current features and its possible improvements.</p>

<p><img src="http://coconauts.github.io/images/posts/watchduino2-prototype/all-3.jpg" /></p>

<!--more-->


<h2>Software</h2>

<p>The software is running in an Arduino Mini Pro v2 3.3v 8Mhz and spans across 1588 lines of code, 17 files and 9 different classes.</p>

<p>This code takes 28.212 bytes of the ATMega328&rsquo;s ROM and everything uses 1200 bytes of RAM when running.</p>

<p>Apart from that, there is an Android app for comunication which provides cool features like a a Twitter client for our smartwatch.</p>

<h2>Hardware</h2>

<p>We need to talk about new hardware for Watchduino 2,
as it is very different from its <a href="http://www.coconauts.net/projects/watchduino/">first version</a>
which makes this new version smaller, prettier and more useful.</p>

<ul>
<li>Arduino mini pro 2 8Mhz 3.3v</li>
<li>LIPO battery 240mah</li>
<li>0.96" I2C 128X64 OLED (Various colors)</li>
<li>3 x 6 x 4.3mm Push Button 2 Pin</li>
<li>0.06A Micro Vibrator Motor</li>
<li>Micro USB LIPO charger</li>
<li>Bluetooth 3.0 module HC-06</li>
</ul>


<p>We have built 2 (and a half) prototypes following the same specification.</p>

<h2>Features</h2>

<p>Thanks to this new hardware, we managed to add new features to this new version.
Most of them were mentioned in the <a href="http://www.coconauts.net/blog/2014/11/22/watchduino-2-dot-0-roadmap/">Watchduino roadmap post</a>,
but you can have another look here:</p>

<h3>Companion app (Android)</h3>

<p><img src="http://coconauts.github.io/images/posts/watchduino2-prototype/manager.png" class="screenshot" /></p>

<p>This is a big one, thanks to the bluetooth module we are able to send and receive messages from and to Android
in realtime. This is a list of the features already available.</p>

<ul>
<li>Time sync: Set up the time sending a short message from the phone with the current timestamp, bye bye RTC.</li>
<li>Weather information: Use weather APIs in the phone to get weather information (temperature, sky, humidity, etc)</li>
<li>Twitter client: Read your twitter timeline from your watch (Awesome!!)</li>
</ul>


<p><img src="http://coconauts.github.io/images/posts/watchduino2-prototype/twitter.jpg" class="screenshot" /></p>

<ul>
<li>Notifications: Get notifications on your watch (emails, twits, whatsapp&hellip;)
using the recent NotificationListener feature in Android.</li>
<li>Debug: Great for debugging, send any message from the watch to your phone.</li>
<li>Battery: Send battery messages from the watch to the phone to watch how the battery decreases with time</li>
</ul>


<p><img src="http://coconauts.github.io/images/posts/watchduino2-prototype/battery.png" class="screenshot" /></p>

<p>But honestly, you can build whatever feature you want using your phone and a few APIs.
Facebook client maybe ? Automatic whatsapp responses ?</p>

<p>Actually, we are working in the following features:</p>

<ul>
<li>Bus notifications (see how long does your bus take to arrive, using the Transport For London APIs)</li>
<li>Settings: Managed from the android app, and stored in the phone.</li>
</ul>


<h3>Screens</h3>

<p>New screens, new resolution (128x64) and new style, with dynamic in-screen information for the buttons.</p>

<p><img src="http://coconauts.github.io/images/posts/watchduino2-prototype/watch.jpg" class="screenshot"/></p>

<p>Screen navigation is easier now with this simple menu.</p>

<p><img src="http://coconauts.github.io/images/posts/watchduino2-prototype/menu.jpg" class="screenshot" /></p>

<h3>Notifications</h3>

<p>A vibrator and a tiny buzzer will alert you when a notification arrives.</p>

<p>Also, the buzzer can play short melodies for alarms and whatnot.</p>

<h3>Battery life</h3>

<p>Using a tiny 240mah battery and without any kind of energy optimization (on-screen, bluetooth always on)
a single charge last around 10 hours.</p>

<p>Also, you can always look at your remaining battery in the top bar of the screen (like in phones).</p>

<p>The charging time is less than 20 minutes.</p>

<p>The problem here is the bluetooth module (HC-06), I was able to reduce its consumption to 4mA in sleep mode,
but even so, the device would last up to 40 hours, which is not enough.
No more optimisations can be performed from our side,
so at this point I think the only option would be to try with <a href="http://en.wikipedia.org/wiki/Bluetooth_low_energy">Bluetooth BLE</a>.</p>

<h2>Possible improvements</h2>

<p>It works cool so far, but it can be improved a lot (there are still a few bugs).
However that may require some time and maybe a new prototype.
In short term, this are the things we are going to focus in the next weeks.</p>

<ul>
<li>Better case (3D printed?).</li>
<li>Fix missing characters from Watchduino to Android.</li>
<li>New charging system.</li>
<li>Improve Battery life with Bluetooth BLE.</li>
<li>Save settings in Android.</li>
<li>Bring back the alarm / countdown features from Watchduino v1.</li>
<li>Memory ROM and RAM can be optimized.</li>
</ul>

]]></content>
</entry>

</feed>