<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: cron | Coconauts]]></title>
<link href="http://coconauts.net/blog/tags/cron/atom.xml" rel="self"/>
<link href="http://coconauts.net/"/>
<updated>2016-12-21T17:30:32+00:00</updated>
<id>http://coconauts.net/</id>
<author>
<name><![CDATA[Coconauts]]></name>
<email><![CDATA[admin@coconauts.net]]></email>
</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Background tasks in jenkins and IP-change script example]]></title>
<link href="http://coconauts.net/blog/2014/09/08/background-tasks-in-jenkins-ipchange/"/>
<updated>2014-09-08T23:00:00+00:00</updated>
<id>http://coconauts.net/blog/2014/09/08/background-tasks-in-jenkins-ipchange</id>
<content type="html"><![CDATA[<p>There are a few ways to schedule tasks to run periodically, from building our own scheduler in whatever language we want,
to use <a href="https://github.com/chrisspen/django-chroniker">chroniker</a> in Django, or even use the built-in cron utility in Unix systems.</p>

<p>However, I found out that Jenkins is quite good with that, even though that is not its main objective as CI system.
These are the advantages of Jenkins over cron.</p>

<!--more-->


<ul>
<li>Embedded email system on failures.</li>
<li>See logs (and embedded log rotation).</li>
<li>See clearly when they ran for the last time.</li>
<li>Friendly web interface.</li>
<li>Keep a history of all runs.</li>
<li>Take the latest version directly from git/cvs/etc.</li>
<li>Lot of plugins.</li>
<li>Setup a different number of executors so it doesn&rsquo;t overload the system (best for low-priority processes).</li>
</ul>


<p>Since all of those features come out of the box, you simply need to setup a job specifying the script you want to run and it&rsquo;s frequency, as you would do with Cron.</p>

<h2>Sample configuration: IP change</h2>

<p>We are going to show one of our background scripts we have running on Jenkins and its configuration. This is just a sample, and you can modify it in any way you want
(e.g. using git directly rather than downloading the project first in a different task).</p>

<p>The script we want to show is a simple python script that checks if the IP has changed locally (useful for dynamic IP environments).
As the script is returning an error when it changes, we get an email everytime it happens,
but we could also update our dynamic DNS using services like changeip.com if your router doesn&rsquo;t provide that feature.</p>

<p>In order to run that script, we have a lot of options here:</p>

<ul>
<li>Write the script directly in the Jenkins task in the default Jenkins terminal (<code>sh</code> by default).</li>
<li>Copy the script to any folder and just run it from Jenkins (like <code>python $FOLDER/run.py</code>)</li>
<li>Fetch from a git and run it.</li>
<li>Create a task to fetch the project (based on git changes), and another task to run it (from the previous fetched folder).</li>
</ul>


<p>In this case we are going to use the last option (the one with 2 tasks), the reason to do this is  because we don&rsquo;t update that script very often, so it is better to fetch it once and run it 1 hundred times;
and another reason is because sometimes the command <code>git fetch</code> sometimes fails in jenkins, generating a false positive (apparently this is a <a href="https://issues.jenkins-ci.org/browse/JENKINS-20750">bug</a> in the jenkins git plugin)</p>

<h3>Configuring the fetch task</h3>

<p>This part is basic if you have set up a Jenkins job before using git, if not, just copy the following config using our <a href="https://github.com/coconauts/IP-change">IP Change repo available in GitHub</a></p>

<p><a target="_blank" href="http://coconauts.net/images/posts/background-task-in-jenkins/jenkins-fetch.png" >
<img src="http://coconauts.net/images/posts/background-task-in-jenkins/jenkins-fetch.png" />
</a></p>

<p>This project doesn&rsquo;t require any aditional config, as the emails are sent by Jenkins and your files and IPs are generated by the script itself.</p>

<p>Once the task has ran, your <code>ip_change.py</code> script should be located in <code>/var/lib/jenkins/jobs/IP Change fetch/workspace</code>,
and you could try to run it directly from the terminal using the jenkins user (<code>sudo -u jenkins python ip_change.py</code>)</p>

<h3>Configuring the background task</h3>

<p>Now is time to setup your background task using this configuration.</p>

<p><a target="_blank" href="http://coconauts.net/images/posts/background-task-in-jenkins/jenkins-background.png" >
<img src="http://coconauts.net/images/posts/background-task-in-jenkins/jenkins-background.png" />
</a></p>

<p>Where <code>$HOME</code> or <code>$JENKINS_HOME</code> is an environment variable that contains <code>/var/lib/jenkins</code> by default</p>

<p>Then try to run the new background task to see any of the following results:</p>

<ul>
<li>Running the task for the first time:
```</li>
<li>cd &lsquo;/var/lib/jenkins/jobs/IP Change fetch/workspace&rsquo;</li>
<li>python ip_change.py</li>
<li>Requesting current ip with &lsquo;icanhazip&rsquo;</li>
<li>Request took 0 seconds</li>
<li><p>This is the first time to run the ip_change script, I will create a file in /tmp/ip.log to store your current address: 86.185.119.138
Finished: SUCCESS
```</p></li>
<li><p>IP is still the same:</p></li>
</ul>


<p><code>
+ cd '/var/lib/jenkins/jobs/IP Change fetch/workspace'
+ python ip_change.py
* Requesting current ip with 'icanhazip'
* Request took 0 seconds
* IP is still the same: 86.185.119.138
Finished: SUCCESS
</code></p>

<ul>
<li>IP has changed (it will send an email):</li>
</ul>


<p><code>
+ cd '/var/lib/jenkins/jobs/IP Change fetch/workspace'
+ python ip_change.py
* Requesting current ip with 'icanhazip'
* Request took 0 seconds
* IP has changed from 86.185.224.178 to 86.185.119.138
Build step 'Execute shell' marked build as failure
Sending e-mails to: &lt;your-email&gt;@&lt;your-domain&gt;
Finished: FAILURE
</code></p>

<h2>Conclussions</h2>

<p>There are also a lot of useful things you can run this way like daily backups or server health-checks.</p>

<p>So if you already have a Jenkins server for your common CI tasks, why are you not using it for job schedulling too ?</p>
]]></content>
</entry>

</feed>