<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: music | Coconauts]]></title>
<link href="http://coconauts.net/blog/tags/music/atom.xml" rel="self"/>
<link href="http://coconauts.net/"/>
<updated>2017-05-01T22:42:07+00:00</updated>
<id>http://coconauts.net/</id>
<author>
<name><![CDATA[Coconauts]]></name>
<email><![CDATA[admin@coconauts.net]]></email>
</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Infinify: an infinite discovery mode for Spotify]]></title>
<link href="http://coconauts.net/blog/2017/05/01/infinify-an-infinite-discovery-mode-for-spotify/"/>
<updated>2017-05-01T18:13:37+00:00</updated>
<id>http://coconauts.net/blog/2017/05/01/infinify-an-infinite-discovery-mode-for-spotify</id>
<content type="html"><![CDATA[<p>I&rsquo;m a Spotify user. I&rsquo;m not the greatest fan of the user experience they offer, but it&rsquo;s definitely the &ldquo;lesser evil&rdquo; when it comes to music streaming.</p>

<p>You see, I&rsquo;m the kind of person that just cant be bothered to choose, I <em>loathe</em>
choosing. Deciding albums to hear? What are we, in the 90s? with phisical CDs that
need popping into a player? It&rsquo;s the digital age! I just want to open Spotify
and be presented with a continuous stream of non-stop music,
wihout having the choose an album, or a genre, or a playlist.
They even require my constant feedback when in radio mode!
(don&rsquo;t even get me started on the Spotify radio, <em>yuck</em>).
I just want a big &ldquo;play&rdquo; button and let Spotify use a teeny bit of
machine intelligence to feed me stuff that it thinks I might like.
Considering the app is sitting on top of a pile of data from me
(listening history, saved collection)&hellip; is it really that hard?</p>

<p>Because Spotify is not giving that to me though, we at Coconauts decided to
build it ourselves, using their API and Javascript. The result: Infinify.</p>

<p><img src="/images/posts/2017-05-01-infinify/infinify.png" alt="Infinify" /></p>

<!-- more-->


<h2>What is it?</h2>

<p>Infinify is a website with a huge &ldquo;play&rdquo; button, that feeds on your
Spotify saved collection to produce a continuous mix of tracks from your
own music plus recommendations.</p>

<h2>How does it work?</h2>

<p>Spotify exposes <a href="https://developer.spotify.com/web-api/get-recommendations/">a very powerful <code>/recommendations</code> endpoint on their API</a>,
which I reckon plugs into <a href="https://qz.com/571007/the-magic-that-makes-spotifys-discover-weekly-playlists-so-damn-good/">the same magic that is powering their discovery modes</a>.</p>

<p>The <code>/recommendations</code> endpoint instantly gives you a list of recommended tracks,
given a seed of a list of songs, artists or genres. You can even tune a bunch of
crazy parameters, such as <em>danceability</em>, <em>energy</em> or <em>popularity</em>. It&rsquo;s quite amazing.</p>

<p>The problem though is that the recommendations output is finite (capped at 100 results),
whereas we want a continuous flow of recommendations.</p>

<p>Another problem with it, which is also noticiable in their discovery modes,
is that it tries too hard to give you music that is similar to <em>all</em> of your seeds.
Wha this means is: if you seed it with some classical music, heavy metal and jazz,
it&rsquo;s going to try to return tracks that are strange chimaeras mixing all of those
traits, rather than giving you a mixed bag of more conventional tracks in those genres.
In other words: it&rsquo;s an <em>and</em>, not an <em>or</em>. Now, this might actually be what you want
in some occasions, but when it comes to recommending music to people it doesn&rsquo;t work:
if I like John Williams and Queen I want to be recommended Danny Elfman and Van Halen,
not &ldquo;Some Orchestra Plays Very Bland Rock Classics&rdquo;.</p>

<p><img src="/images/posts/2017-05-01-infinify/epicrock.png" alt="Infinify" /></p>

<p>So our solution involves working around the endpoint, using in a bit unorthodox way:</p>

<ol>
<li>Fetch a random single song from the user&rsquo;s saved music collection.</li>
<li>Use this song&rsquo;s artist as a seed to the <code>/recommendations</code> endpoint. Get a small X number of songs back.</li>
<li>Pick a random song from the response, and add it to a playlist.</li>
<li>Repeat the above every 2 minutes.</li>
</ol>


<p>In this fashion, the result is a Spotify playlist that is continuously growing
with fresh recommendations (for as long as the the website remains open).</p>

<p>We use the artist as a seed, rather than the song, so that you can still get
a chance of getting the songs you already have in your library and love.</p>

<p>The seed is started from a single song to try to get purer recommendations, rather
than strange blends. We then produce X recommendations and pick one. Why?
Well, we experienced that the first item in the results is always a song by the
same artist that your seed, and this doesn&rsquo;t give you much variety. So by producing
several and then picking one of them, you get a delicious balance: you&rsquo;ll get a
certain chance to get songs by the same artists in your library, but them a slightly
bigger chance to get related artists (that may or not be in your library).</p>

<p>This X number of tracks is what we call the <em>discoverability</em> parameter, and
you can toggle it between 1 (&ldquo;I just want the artists I know and love&rdquo;) and 10
(in which approximately 9 in every 10 songs will be new, and 1 will be familiar).</p>

<p><img src="/images/posts/2017-05-01-infinify/discoverability.png" alt="Infinify" /></p>

<h2>The ugly bits</h2>

<p>Unfortunately there are some limitations that make the user experience a bit rough.
For starters, the fact that you need to have an external web application to start
the infinfy playlist. Spotify <a href="https://developer.spotify.com/technologies/apps/">scrapped their in-app extensions</a> some years ago,
so the only way to add integration nowdays is by keeping them completely external.</p>

<p>It would be possible to stream the audio directly to the webapp, but only 30-second
samples: not acceptable. So you need Spotify for playback, and the webapp for the
integration.</p>

<p>You can at least <a href="https://developer.spotify.com/web-api/start-a-users-playback/">control the playback on a device via the API</a>, you need to
have a premium account for that. So if you don&rsquo;t, you need to hit the play button
twice: once on infinify, once on the app.</p>

<p>Another uglyness is that we found no way via the API to be able to track the
listening progress of the user on the playlist. This made it quite difficult to
determine when we should add and remove tracks from the playlist.
After trying some nasty kludges, we decided for a straigghtforward solution:
just add new songs every 2 minutes, and keep the old ones there. They don&rsquo;t
bother you after all! (in fact, its kinda nice to have a record of your
listening session) and there&rsquo;s no problem on Spotify even if the playlist
gets absurdly long.</p>

<p>The only edge case is if you run out of songs in the
playlist: for this eventuality we added a little <code>(+)</code> button to force a manual
generation. When you start a new session the playlist gets reset, as it would be
confusing to have the long list of tracks from last time.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/_ge4n9zmTRQ" frameborder="0" allowfullscreen></iframe>


<p>Because the way we are abusing the <code>/recommendations</code> endpoint, ours is
not the most rate-friendly solution. However, it&rsquo;s also not that bad: our load
is 4 or 5 requests every 2 minutes, which still falls within reasonable limits,
at least if we keep it to only one user.</p>

<h2>Final remarks</h2>

<p>For recommender engines, and in general many AI problems, there&rsquo;s usually
a rule: a naive, straightforward solution can take you 60-80% there.
Then any increases on that number will require years of PhD research.</p>

<p>Infinify is a very simple solution, but surprisingly, also very effective! I was
very pleased with the quality of recommendations, and how you can still get
a mix of familiar and new. Of course, most of the
heavy lifting comes from the magic behind the <code>/recommendations</code> engine,
but I&rsquo;m happy that we could bend it to overcome it&rsquo;s limitations.</p>

<p>For now, I intend to use it heavily for a while and see if it still satisfy me,
or if recommendations start getting a bit repetitive. In such case, I might start
tunning the algorithim to try more variability (for instance, going for
multi-level recommendations from recommendations).</p>

<p>You can get the code for Infinify <a href="https://github.com/coconauts/infinify">on Github</a>.</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Synthesizing chiptune music programatically]]></title>
<link href="http://coconauts.net/blog/2015/10/04/creating-chiptune-music-programatically/"/>
<updated>2015-10-04T19:35:34+00:00</updated>
<id>http://coconauts.net/blog/2015/10/04/creating-chiptune-music-programatically</id>
<content type="html"><![CDATA[<p>We&rsquo;ve shown you in the past how to create chiptune-style music both
<a href="https://coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">with a DAW program</a>,
and <a href="https://coconauts.net/blog/2015/04/19/creating-trve-chiptune-with-a-tracker/">with old-school trackers</a>.</p>

<p>There&rsquo;s still another way to do it: via code. Particularly suitable for
videogame music in particular, as you can have fine-grained control
over the music that you autogenerate, giving it the ability to be
dynamic.</p>

<p>Every programming language worth their name will have a basic sound
synthesizing library, which will be more than what to need to
make chiptune sounds.</p>

<!--more-->


<p>The basics are these: you&rsquo;ll need something called an oscillator,
which is nothing more than a device (in our case it will be a software
device, but a device nonetheless) capable of generating <a href="http://public.wsu.edu/~jkrug/MUS364/audio/Waveforms.htm">basic sound
waves</a>:
sine, square, triangle and sawtooth.</p>

<p><img src="http://coconauts.net/images/posts/chiptune/waveforms.png" /></p>

<p>Then' you&rsquo;ll combine several sound waves together to form your sound.
This technique is known as additive synthesis, and it&rsquo;s illustrated
just below.</p>

<p><img src="http://coconauts.net/images/posts/chiptune/additive.jpg" /></p>

<p>Once you have a timbre that you like, the synthesizing library should
have functions to alter its frequency, which will result in
different tones being produced (this is called FM, or frequency modulation,
synthesis), and then you have all you need to make any melody.</p>

<p>There&rsquo;s something that you have to take into account, and is that you
should limit yourself a bit with the kind and number of waves that
you&rsquo;re using, to try to replicate the limitations of the hardware of
old, and thus achieve convincing chiptune sounds.
In <a href="http://opengameart.org/forumtopic/kickin-it-old-school-setting-up-nes-style-chiptunes">this forum post</a>
the author recommends using nothing more than square, triangle and
sawtooth waves (avoiding sine), and limiting yourself to four
simultaneous instruments (as old sound cards didn&rsquo;t come with many
audio channels). Have in mind though that these are just guidelines,
in practice you should experiment with everything and pick whatever
you think sounds good and convincingly chiptuneish.</p>

<p>Synthesizing your
own game music programatically has several important advantages:
you wont waste any space storing your music assets (when your game is
going on mobile phones this is an important aspect to consider!), and
it allows for unlimited flexibility if your music is going to be
dynamic. So we personally are keen in exploring this approach in a
future game.</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Easily create 8-bit sound effects]]></title>
<link href="http://coconauts.net/blog/2015/07/06/easily-create-8-bit-sound-effects/"/>
<updated>2015-07-06T20:10:17+00:00</updated>
<id>http://coconauts.net/blog/2015/07/06/easily-create-8-bit-sound-effects</id>
<content type="html"><![CDATA[<p>In a past post we&rsquo;ve shown you <a href="https://www.coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">how to make 8-bit music</a>,
which you might want to use in a game. But of course, if you are having
8-bit music, you&rsquo;ll want your game sound effects to match as well.</p>

<p>In this post we&rsquo;ll show you how to generate 8-bit style sound effects for
for games using a very simple free tool called <a href="http://www.bfxr.net/">bfxr</a>.
No audio or DSP knowledge needed!</p>

<!--more-->


<p><a href="http://www.bfxr.net/">bfxr</a> is a generator for 8-bit style sound effects.
It&rsquo;s also completely idiot proof, and you don&rsquo;t even need to install it,
because it&rsquo;s available as a web app (though you can if you want to).</p>

<p><img src="http://coconauts.net/images/posts/chiptune/bfxr.png" /></p>

<p>Simply pick a category to generate a randomized sound that
will look legit enough, and the parameters used to synthesize it will
get filled out. In n00b mode you simply keep clicking until just the
right sound appears, and if you&rsquo;re audio savvy you can even tune the
parameters to your will. When you&rsquo;re satisfied, just save the sound in wav
format and you&rsquo;re done.</p>

<p>You&rsquo;ll probably want to do some format conversion with your bfxr
generated sounds though, as wav is an uncompressed format that eats up a
ridiculous amount of space. For this, use any audio converting tool, like
ffmpeg:</p>

<pre><code>ffmpeg -i audio.wav  -acodec libvorbis audio.ogg
</code></pre>

<p>Actually, since we don&rsquo;t care very much about the quality of the audio
(if fact, the lower it is, it will look more authentic!), we can use
the same tool to downsample the track (<code>-ar</code> flag sets the sample rate,
and <code>-ab</code> sets the bitrate) and turn it to mono (<code>-ac</code> flag sets the
number of channels):</p>

<pre><code>ffmpeg -i audio.ogg -acodec libvorbis -ac 1 -ab 64000 -ar 22050 output.ogg
</code></pre>

<p>In this case we&rsquo;ve reduced the bitrate to 64k, the sample rate to half the
usual value, and the channels to just one.</p>

<p>The same downsampling process can also be applied to yor 8-bit game music actually.
It shouldn&rsquo;t hurt the music quality and it will noticeably reduce the
size of your assets, something you surely want if you&rsquo;re doing mobile
development.</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Creating TRVE CHIPTUNE with a tracker]]></title>
<link href="http://coconauts.net/blog/2015/04/19/creating-trve-chiptune-with-a-tracker/"/>
<updated>2015-04-19T19:34:31+00:00</updated>
<id>http://coconauts.net/blog/2015/04/19/creating-trve-chiptune-with-a-tracker</id>
<content type="html"><![CDATA[<p>Following up with the
<a href="https://www.coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">previous post about chiptune music</a>,
remember what I said about those purists only considering to be TRVE
CHIPTUNE that in the format of Amiga MOD files created with an old
school tracker software? Well, guess what, you can do just that to
create chiptune music the hardcore way.</p>

<!--more-->


<p>This route is certainly not for the faints of heart, but the results
will be really convincing and proper chiptune music, not cheap
imitations. As a matter of fact, when you go out in the wild looking for
chiptune tutorials they are mostly going to point to this approach.</p>

<p>So in the dawn of times, <a href="http://en.wikipedia.org/wiki/Chiptune#Tracker_chiptunes">apparently</a>
Amiga computers had really good sound chips and equally good tracking
software, and this spawned a community of enthusiasts creating chiptune
music with them. Over the years, software trackers came to be for PC,
imitating those of Amiga computers, and these are the ones you can use
to create chiptune music, as was done in the 80s. And with that, I mean
cryptic and hardcore text-based interfaces. Like this one:</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/Fw4Aa0FfuJU" frameborder="0" allowfullscreen></iframe>


<p>That was <a href="http://milkytracker.org/">MilkyTracker</a>, which is actually
the friendliest of trackers that I found (it&rsquo;s also free and available
for Linux). There are <a href="http://woolyss.com/chipmusic-chiptrackers.php">plenty of other options out there though</a>.</p>

<p>If you feel brave enough to step into this path, your experience
wouldn&rsquo;t be complete without some ancient tutorials in glorious static
html websites from a decade ago, so here&rsquo;s some to get you started:</p>

<ul>
<li><a href="http://resources.openmpt.org/tracker_handbook/handbook.htm">The Tracker&rsquo;s Handbook</a></li>
<li><a href="http://amp.dascene.net/faq.php">Amiga Music Preservation FAQ</a></li>
<li><a href="http://chiptuneswin.com/blog/so-you-wanna-make-a-chiptune-2-computer-trackers/">Tutorial at The ChipWIN blog</a></li>
<li><a href="http://woolyss.com/">Woolys</a> is an extensive reference site with tons
of tutorials and documentation about all things chiptune and tracking.</li>
</ul>


<p>Don&rsquo;t forget though that there&rsquo;s a saner way to do it, we&rsquo;ve shown you how in the
<a href="https://www.coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/">previous post</a>!</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Creating chiptune style music with Ubuntu]]></title>
<link href="http://coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu/"/>
<updated>2015-02-02T19:36:33+00:00</updated>
<id>http://coconauts.net/blog/2015/02/02/creating-chiptune-style-music-with-ubuntu</id>
<content type="html"><![CDATA[<p>This is the first post in a series, in which we will
detail several aspects of the creation of the music of Super Time Bomb.
In this post we&rsquo;ll show you how we created the music for the game
(which happens to be chiptune-style) using free software available
for the Ubuntu platform. The tools that we are using are however pretty generic,
and there should be alternatives (if not even direct ports) available
for your platform.</p>

<p> <!--more--></p>

<h2>What do I mean by chiptune</h2>

<p>I think there&rsquo;s no better way to explain than to show:</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/auQv90TfXrI" frameborder="0" allowfullscreen></iframe>




<iframe width="420" height="315" src="https://www.youtube.com/embed/1vrfeBPDEM8" frameborder="0" allowfullscreen></iframe>




<iframe width="420" height="315" src="https://www.youtube.com/embed/NKwqMZd6zhw" frameborder="0" allowfullscreen></iframe>


<p>In this tutorial I&rsquo;ll be calling chiptune music, or 8-bit music,
or &ldquo;beeps and boops&rdquo; music, to the kind of music games had when they
couldn&rsquo;t afford to store and play recorded music and they had to
synthesize it themselves, using what nowdays we consider very modest
hardware.</p>

<p>Be warned though, that this is not a very technical definition
of the term. There are purists out there who will only call chiptune
music to that coming out of an old Amiga-style tracker in the form of a
MOD file, or to that manually handcrafted from bending real physical chips.
In our case though, our only requirement is that it sounds like it comes
from an old Nintendo game, and that&rsquo;s about it.</p>

<p>Now for the interesting part: to make it! There are several approaches you can
follow to create this kind of music, from the purist way of using chiptune
trackers, to synthesize it directly in your game code. But there&rsquo;s really no
need to make chiptune music the way it was done 20 years ago, when today we
have very powerful software for audio creation, and ready-made
high quality virtual instruments: including chiptune-sounding ones.</p>

<h2>Making chiptune with LMMS and VSTi plugins</h2>

<p>The music of Super Time Bomb was made using <a href="https://lmms.io/">LMMS</a>,
which is an open source
alternative to the popular Fruity Loops Studio. It&rsquo;s free, multiplatform,
and easy to use. And in recent versions it will let you import VSTi
plugins (a very popular format for instrument and audio effects),
even if you are using it on Linux (it will rely on Wine to run them).</p>

<p>We will be using the following selection of free VSTi plugins,
that will provide us with a handful of chiptune-style instruments and sounds:</p>

<ul>
<li><a href="http://www.tweakbench.com/peach">Peach</a> and <a href="http://www.tweakbench.com/triforce">Triforce</a>
will provide you with a decent set of NES-style instruments.</li>
<li><a href="http://www.tweakbench.com/toad">Toad</a> is a NES-style percussion set.</li>
<li>There&rsquo;s also <a href="http://www.ymck.net/en/download/index.html">Magical 8-Bit</a>,
but unfortunately I couldn&rsquo;t make that one work on my setup
(don&rsquo;t let that stop you from trying it yourself though!)</li>
</ul>


<p>Make sure you download the Windows version of the plugins
(in the cases where there are more available), even if you are using
Linux. Each of them comes in the form of a zipped package, containing a
dll plus potentially some other files (texts, sounds&hellip;) inside. Extract
the dll for each of them (as this is actually the VST plugin) to any
directory of your choice.</p>

<p>After you have the dlls, you&rsquo;ll have to install them in your workstation
software to be able to use them to make awesome music. For LMMS on Linux
the process is not so straightforward, but it can be done.</p>

<p>LMMS is available on the repos, but unfortunately the version that we can find
there (at least on Ubuntu 14.10) is old, and doesn&rsquo;t come with VSTi support.
To get a newer version you have two alternatives. Some months ago,
what I did was compiling the latest version (there&rsquo;s some trickery to
be done to get VSTs to work, which basically involves compiling the
VeSTige plugin first.
<a href="http://nickhumphreyit.blogspot.co.uk/2012/01/how-to-compile-and-install-vestige.html">Here&rsquo;s the instructions I followed</a>).
However this should not be necessary anymore, as there&rsquo;s now the official
<a href="http://kxstudio.sourceforge.net/Repositories#Ubuntu">KXStudio ppa repository</a>
which you can add to Ubuntu to be able to install everything from the
package manager.</p>

<p>To add the KXStudio ppa:</p>

<pre><code>sudo add-apt-repository ppa:kxstudio-debian/kxstudio
sudo apt-get update
sudo apt-get install kxstudio-repos
sudo apt-get update
</code></pre>

<p>Then install LMMS and the VST support:</p>

<pre><code>sudo apt-get install lmms lmms-vst-full
</code></pre>

<p>You may also need to install wine first, if you don&rsquo;t have it already, as
LMMS relies on it to run the Windows VST plugins that we are using.</p>

<p>Then open up your newly installed LMMS, and say yes to all default
options if prompted with them. After that, you will be shown an empty
workbench. On the left side, you&rsquo;ll see a column with icons. Click on the
first one, which is the instrument plugins, and a sidebar will open
showing all available instruments. There should be there one called
&ldquo;VeSTige&rdquo; (if it&rsquo;s not there, it means you didn&rsquo;t install LMMS correctly,
as you are missing the VST support). Drag and drop this instrument into
the song editor, and then click on the instrument name. A new window
should open showing the instrument controls. Here&rsquo;s an image showing
the process:</p>

<p><img src="http://coconauts.net/images/posts/chiptune/lmms-vestige.png" /></p>

<p>VeSTige is not really an actual instrument, it&rsquo;s simply a loader for
Windows VSTi plugins (it will run them using Wine). If you click on the
little green folder on the interface, a file browser will come up, and
then you can select one of the dlls for the instruments you have
downloaded. When you do so, after a few seconds of loading, you should
see the VST instrument controls pop up in a new window, and the name of
the instrument in the song editor will also be different. You can then
select your sound from the VST interface, and start adding notes on the
piano roll to create your music!</p>

<p>For every VST instrument you want to load, you&rsquo;ll have to use an
independent VeSTige instance, so simply repeat the process over and over
as needed. Since the VSTs we are using let you select from various
instruments you will probably want to load several of them in separate
tracks, to be able to use several sounds independently. To do so, you&rsquo;ll
simply have to add several VeSTiges loading the same VST in each of them,
and use the instrument GUI to select the sound you want that track to
use. This is how my workbench looks like after loading a bunch of Peach +
Toad tracks with VeSTige:</p>

<p><img src="http://coconauts.net/images/posts/chiptune/lmms-timebomb.png" /></p>

<p>After you are done, you&rsquo;ll be able to export your music to any common
audio format (like ogg or mp3), and then you can use it in your game.</p>
]]></content>
</entry>

</feed>