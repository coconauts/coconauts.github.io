<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: energenie | Coconauts]]></title>
<link href="http://coconauts.net/blog/tags/energenie/atom.xml" rel="self"/>
<link href="http://coconauts.net/"/>
<updated>2017-05-16T08:04:53+00:00</updated>
<id>http://coconauts.net/</id>
<author>
<name><![CDATA[Coconauts]]></name>
<email><![CDATA[admin@coconauts.net]]></email>
</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[Control Energenie with NodeMCU]]></title>
<link href="http://coconauts.net/blog/2017/05/16/control-energenie-with-nodemcu/"/>
<updated>2017-05-16T08:53:19+00:00</updated>
<id>http://coconauts.net/blog/2017/05/16/control-energenie-with-nodemcu</id>
<content type="html"><![CDATA[<p>You might have noticed, we like the concept of Smart Homes, and physical devices you can control remotely from an API using your local Wifi network. Specifically, we&rsquo;re talking about Energenie sockets, a brand of electrical sockets controlled by radio. We&rsquo;ve introduced previously these sockets in <a href="/blog/tags/energenie/">posts</a> like <a href="/blog/2017/03/10/control-energenie-with-esp8266/">Control Energenie with ESP8266</a>, <a href="/blog/2017/02/15/control-energenie-with-pebble/">Control energenie with Pebble</a> or <a href="/blog/2016/04/15/energinie-and-raspberry-pi-setup/">Raspberry Pi and Energenie</a> but this time, we&rsquo;re going to show you how we built the same Energenie radio controller with a NodeMCU web server.</p>

<p><img src="/images/posts/2017-05-16-energenie-nodemcu/board.jpg" alt="board" /></p>

<!-- more-->


<h2>NodeMCU</h2>

<p>NodeMCU is an open source IoT platform. It includes firmware which runs on the ESP8266 Wi-Fi SoC from Espressif Systems, and hardware which is based on the ESP-12 module. <a href="https://en.wikipedia.org/wiki/NodeMCU">Source</a></p>

<p>The concept behind this is the same as our <a href="/blog/2017/03/10/control-energenie-with-esp8266/">ESP8266</a> implementation. But, there are a few advantages of using NodeMCU instead.</p>

<ul>
<li>Easier development</li>
<li>Lua scripting (easier than C++)</li>
<li>Standard 5V microusb power input</li>
<li>More stability (ESP8266 was constantly restarting (memory leak on C++?))</li>
<li>Easier wiring (No need for reset button or PIN0 hack)</li>
<li>More pins available than our previous <a href="http://www.esp8266.com/wiki/doku.php?id=esp8266-module-family">ESP-01</a> module (this is ESP-12)</li>
<li>Fully dedicated SDK (ESPlorer)</li>
</ul>


<p><img src="/images/posts/2017-05-16-energenie-nodemcu/esplorer.png" alt="esplorer" /></p>

<h2>Lua examples on NodeMCU</h2>

<p>Lua scripting is very simple and easy to learn. Similar to python at first, but without the alignment restriction; you use <code>end</code> tags to mark the end of a statement. These are a few examples</p>

<h3>LED blink</h3>

<p>```
LED_PIN = 4 &mdash; Use pin 4
gpio.mode(LED_PIN, gpio.OUTPUT)</p>

<p>while true do
   gpio.write(LED_PIN, gpio.HIGH)
   tmr.delay(500 * 1000)</p>

<p>   gpio.write(LED_PIN, gpio.LOW)
   tmr.delay(500 * 1000)
end
```</p>

<h3>Web server</h3>

<p>```
wifi.setmode(wifi.STATION)
wifi.sta.config(&ldquo;Marphus&rdquo;,&ldquo;fafafafafa&rdquo;)</p>

<p>function check_wifi()
 local ip = wifi.sta.getip()</p>

<p> if(ip==nil) then
   print(&ldquo;Connecting&hellip;&rdquo;)
 else
  tmr.stop(0)
  print(&ldquo;Connected to AP!&rdquo;)
  print(ip)<br/>
 end
end
tmr.alarm(0,1000,1,check_wifi)</p>

<p>srv=net.createServer(net.TCP)
srv:listen(80,function(conn)</p>

<pre><code>conn:on("receive", function(client,request)
    local buf = "";
    local _, _, method, path, vars = string.find(request, "([A-Z]+) (.+)?(.+) HTTP");
    if(method == nil)then
        _, _, method, path = string.find(request, "([A-Z]+) (.+) HTTP");
    end
    -- Store all the GET parameters in a table
    local _GET = {}
    if (vars ~= nil)then
        for k, v in string.gmatch(vars, "(%w+)=(%w+)&amp;*") do
            _GET[k] = v
        end
    end

    buf = buf.."&lt;h1&gt; ESP8266 Web Server&lt;/h1&gt;";

    client:send(buf);
    client:close();
    collectgarbage();
end)
</code></pre>

<p>end)
```
More examples are available on their <a href="http://nodemcu.com/index_en.html">official website</a></p>

<h2>Control radio energenie via web server</h2>

<p>In this script we will combine the previous web server with a simple function to send radio signals.</p>

<p>```
wifi.setmode(wifi.STATION)
wifi.sta.config(&ldquo;SSID&rdquo;,&ldquo;password&rdquo;)</p>

<p>function check_wifi()
 local ip = wifi.sta.getip()</p>

<p> if(ip==nil) then
   print(&ldquo;Connecting&hellip;&rdquo;)
 else
  tmr.stop(0)
  print(&ldquo;Connected to AP!&rdquo;)
  print(ip)<br/>
 end
end</p>

<p>tmr.alarm(0,1000,1,check_wifi)</p>

<p>RADIO_PIN = 4
gpio.mode(RADIO_PIN, gpio.OUTPUT)</p>

<p>function sendCode(code)</p>

<pre><code>print("Sending radio code " .. code) 
</code></pre>

<p>  rc.send(RADIO_PIN,code,24,185,1,2) &mdash;Sends the data via GPIO pin 4 to the rc switch.
end</p>

<p>srv=net.createServer(net.TCP)
srv:listen(80,function(conn)</p>

<pre><code>conn:on("receive", function(client,request)
    local buf = "";
    local _, _, method, path, vars = string.find(request, "([A-Z]+) (.+)?(.+) HTTP");
    if(method == nil)then
        _, _, method, path = string.find(request, "([A-Z]+) (.+) HTTP");
    end
    local _GET = {}
    if (vars ~= nil)then
        for k, v in string.gmatch(vars, "(%w+)=(%w+)&amp;*") do
            _GET[k] = v
            print("Got parameter " .. k .. ": " .. v)
        end
    end
    buf = buf.."&lt;h1&gt; ESP8266 Radio Web Server&lt;/h1&gt;";
    local radiofreq = {
         ["Socket 1"] = {on= 6916877, off= 6916878},
         ["Socket 2"] = {on= 6916871, off= 6916870},
         ["Socket 3"] = {on= 6916875, off= 6916874},
         ["Socket 4"] = {on= 6916867, off= 6916866}
    }
    for k, v in pairs(radiofreq) do 
        buf = buf.."&lt;p&gt;" .. k .. "&lt;a href=\"?f=" ..v["on"] .."\"&gt;&lt;button&gt;ON&lt;/button&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=\"?f="..v["off"].."\"&gt;&lt;button&gt;OFF&lt;/button&gt;&lt;/a&gt;&lt;/p&gt;";
    end 

    local _on,_off = "",""

    if( _GET.f ~= nil)then
          sendCode(_GET.f)
    end
    client:send(buf);
    client:close();
    collectgarbage();
end)
</code></pre>

<p>end)</p>

<p>```</p>

<p><img src="/images/posts/2017-05-16-energenie-nodemcu/server.png" alt="server" /></p>

<p>Again, as always, our code and all the details about this project are available on <a href="https://github.com/rephus/nodemcu-radio">Github</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Control Energenie with ESP8266]]></title>
<link href="http://coconauts.net/blog/2017/03/10/control-energenie-with-esp8266/"/>
<updated>2017-03-10T21:30:19+00:00</updated>
<id>http://coconauts.net/blog/2017/03/10/control-energenie-with-esp8266</id>
<content type="html"><![CDATA[<p>We recently showed you how to control <a href="http://coconauts.net/blog/2017/02/15/control-energenie-with-pebble/">Energenie sockets using Pebble smartwatch app</a>,
thanks to a <a href="http://coconauts.net/blog/2016/04/15/energinie-and-raspberry-pi-setup/">Raspberry PI</a> REST API.</p>

<p>But we recently found this <a href="https://github.com/cjdell/esp-rf-switch">Github repo</a>
about how to use a generic 433Mhz radio module with an ESP8266  to control Energenie sockets.</p>

<!--more-->


<p>So we decided to replace our Raspberry setup with this cheaper, smaller, portable and scalabe solution.</p>

<p>All you need is an ESP8266 and this tiny and cheap radio module</p>

<p><img src="/images/posts/2017-02-16-control-energenie-esp8266/radio-transmitter.png" alt="radio-transmitter" /></p>

<p>In order to build this</p>

<p><img src="/images/posts/2017-02-16-control-energenie-esp8266/hardware.png" alt="hardware" /></p>

<p>The detailed guide and schemas about how to do it is on our <a href="https://github.com/rephus/esp8266-energenie-switch">own Github repo</a></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Control energenie with Pebble]]></title>
<link href="http://coconauts.net/blog/2017/02/15/control-energenie-with-pebble/"/>
<updated>2017-02-15T10:42:19+00:00</updated>
<id>http://coconauts.net/blog/2017/02/15/control-energenie-with-pebble</id>
<content type="html"><![CDATA[<p>Last year I got a cheap Pebble smartwatch
<a href="https://twitter.com/rephus/status/806522854699372546">just days before the company was sold to Fitbit</a></p>

<p>One of the reasons was to play with it building our custom apps,
so we built an app to control our Energenie sockets from the watch,
sending HTTP requests to a Raspberry PI with the official radio module from Energenie.</p>

<p>All you need, apart form the pebble is a Raspberry PI to send the radio signal from a REST API to a Energenie socket.
Check how to do it <a href="http://coconauts.net/blog/2016/04/15/energinie-and-raspberry-pi-setup/">on our previous post</a>.</p>

<p>You can see it in action <a href="https://twitter.com/rephus/status/810630836697649152">here</a>.</p>

<!--more-->




<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Turning on Christmas from my pebble watch app and energenie sockets. <a href="https://t.co/XvtuQGs6h0">pic.twitter.com/XvtuQGs6h0</a></p>&mdash; Javi Rengel (@rephus) <a href="https://twitter.com/rephus/status/810630836697649152">December 18, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The source code is availabe on <a href="https://github.com/rephus/pebble-energenie">this repo</a></p>

<p>We might try to build a game using the gyroscope in the future,
do you have any other ideas?</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[Build a smart home using Raspberry Pi and Energenie]]></title>
<link href="http://coconauts.net/blog/2016/04/15/energinie-and-raspberry-pi-setup/"/>
<updated>2016-04-15T22:51:00+00:00</updated>
<id>http://coconauts.net/blog/2016/04/15/energinie-and-raspberry-pi-setup</id>
<content type="html"><![CDATA[<p>We recently discovered <a href="https://energenie4u.co.uk/">Energenie</a> (thanks to <a href="https://twitter.com/Man0jN">Manoj</a>) a nice and cheap remote controlled socket
which also provides a custom shield for Raspberry Pi, you can use it to
programatically control those sockets. This allows endless possibilities:
from temporized sockets, to a socket that automatically turns on when
detects presence using a PIR sensor, or triggered by a website or a phone app.</p>

<p><img src='https://c2.staticflickr.com/2/1545/25845471424_d600499717_d.jpg'/></p>

<!-- more -->


<p>You can buy 2 different types of Energenie, some <a href="https://energenie4u.co.uk/catalogue/product/ENER002-4">individual sockets</a>
or an <a href="https://energenie4u.co.uk/catalogue/product/ENER010">extension lead socket with 4 individually controlled</a>.
You can also find them cheaper on Amazon or <a href="http://www.ebay.co.uk/itm/161972721449?_trksid=p2060353.m2749.l2649&amp;ssPageName=STRK%3AMEBIDX%3AIT">Ebay</a>.</p>

<p>Every Energenie comes with a remote that you can use to power on or off those sockets using radio
(no need to point with the controller to the socket like an infrared remote).
You can use them just like this, but of course the really fun part is to be able
to program them with your Raspberry Pi. For this, you&rsquo;ll need the
<a href="https://energenie4u.co.uk/catalogue/product/ENER314">control board shield</a>
as well.</p>

<p>You can download a library for Python to use with Raspberry Pi from <a href="http://pythonhosted.org/energenie/">their website</a>, and check some examples of basic usage.</p>

<p>In our case, as our first project, we built a website so you can control all
sockets in the extension lead from your
computer. In one of them we added some Cinema style lights under our sofa using a
LED strip connected to a 12V supplier on the socket.</p>

<p><img src='https://farm2.staticflickr.com/1704/26449115715_b672c53b20_z_d.jpg'/>
<img src='https://farm2.staticflickr.com/1652/26449115515_60a9fd10a7_z_d.jpg'/></p>

<p>The interface looks like this:</p>

<p><img src='https://farm2.staticflickr.com/1630/26423191956_b64967a883_o_d.png'/></p>

<p>You can check the source code in our <a href="https://github.com/rephus/energenie-manager">Github</a>.</p>

<h3>Warnings and limitations</h3>

<p>Each Raspberry PI board or remote allows you to use 4 different sockets
(or 1 extension lead)  maximum. Which means you can&rsquo;t have for example 5 sockets
controlled with a single Raspberry Pi.</p>

<p>Each socket can only be paired with 2 controllers maximum, which means you can&rsquo;t control a socket with a remote and 2 Raspberry Pis. Every time you pair a new socket, the oldest one will get unpaired. Also, remember to pair every device before using it or it won&rsquo;t work.</p>

<p>Do you have more ideas to implement with Energenie? we&rsquo;d like to hear about them in the comments.</p>
]]></content>
</entry>

</feed>